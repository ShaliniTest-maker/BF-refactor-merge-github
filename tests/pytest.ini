[tool:pytest]

# =============================================================================
# Pytest Configuration for Flask Application Migration
# 
# This configuration enforces the technical requirements from Section 6.6:
# - 90% minimum code coverage threshold (Section 6.6.3)
# - Flask-specific testing patterns (Section 6.6.1)
# - Parallel test execution optimization (Section 6.6.1)
# - Asynchronous testing support for Motor operations (Section 6.6.1)
# - Comprehensive test reporting and failure analysis (Section 6.6.2)
# =============================================================================

# Test Discovery and Collection
# -----------------------------------------------------------------------------
testpaths = 
    tests/unit
    tests/integration
    tests/e2e
    tests/performance
    tests/security

python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Recursively search for tests in all subdirectories
collect_ignore = []
norecursionpatterns = __pycache__ *.pyc .git .pytest_cache node_modules

# Test Execution Configuration
# -----------------------------------------------------------------------------
# Enable strict mode for better error detection
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --showlocals
    --durations=10
    --durations-min=1.0
    
    # Coverage Configuration (Section 6.6.3 - 90% minimum requirement)
    --cov=src
    --cov-report=html:tests/coverage_html
    --cov-report=xml:tests/coverage.xml
    --cov-report=term-missing
    --cov-fail-under=90
    --cov-branch
    
    # Parallel Execution (Section 6.6.1 performance optimization)
    --numprocesses=auto
    --dist=worksteal
    
    # Flask Testing Integration
    --tb=short
    --capture=no
    
    # Test Quality and Analysis
    --maxfail=5
    --disable-warnings

# Minimum Python version compatibility
minversion = 7.4

# Required plugins for Flask application testing (Section 6.6.1)
required_plugins =
    pytest-flask>=1.2.0
    pytest-cov>=4.1.0
    pytest-xdist>=3.3.0
    pytest-asyncio>=0.21.0
    pytest-mock>=3.11.0
    pytest-html>=3.2.0
    pytest-testmon>=2.0.0

# Async Testing Configuration (Section 6.6.1 Motor operations)
# -----------------------------------------------------------------------------
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Flask Testing Configuration
# -----------------------------------------------------------------------------
# Flask-specific test markers and configuration
markers =
    # Test Categories (Section 6.6.1 test organization)
    unit: Unit tests for individual components
    integration: Integration tests with external services
    e2e: End-to-end workflow tests
    performance: Performance and load testing
    security: Security and vulnerability tests
    
    # Component-Specific Markers
    auth: Authentication and authorization tests
    api: API endpoint tests
    database: Database integration tests
    cache: Redis caching tests
    external: External service integration tests
    
    # Quality and Performance Markers
    slow: Tests that take more than 1 second
    flaky: Tests with known intermittent failures
    baseline: Performance baseline comparison tests
    
    # Environment Markers
    requires_db: Tests requiring database connection
    requires_redis: Tests requiring Redis connection
    requires_auth0: Tests requiring Auth0 integration
    requires_aws: Tests requiring AWS services
    
    # Test Execution Control
    smoke: Critical functionality smoke tests
    regression: Regression testing suite
    load: Load testing scenarios
    
    # Security Testing
    security_scan: Security vulnerability tests
    penetration: Penetration testing scenarios
    
    # Migration-Specific
    nodejs_parity: Tests validating Node.js equivalence
    performance_variance: Tests enforcing ≤10% variance requirement

# Test Filtering and Selection
# -----------------------------------------------------------------------------
# Default test selection patterns
collect_ignore_glob = [
    "tests/fixtures/*",
    "tests/performance/data/*",
    "tests/performance/reports/*"
]

# Pytest-xdist Configuration (Section 6.6.1 parallel execution)
# -----------------------------------------------------------------------------
# Distributed testing configuration for performance optimization
dist_worksteal_groupby = [
    "test_module"
]

# Pytest-cov Configuration (Section 6.6.3 coverage requirements)
# -----------------------------------------------------------------------------
# Coverage reporting configuration
cov_context = test
cov_branch = true
cov_fail_under = 90

# Coverage exclusions for generated and test files
cov_omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/node_modules/*",
    "*/__pycache__/*",
    "*/setup.py",
    "*/conftest.py"
]

# Test Session Configuration
# -----------------------------------------------------------------------------
# Session-level configuration for comprehensive testing
junit_logging = all
junit_log_passing_tests = true
junit_family = xunit2
junit_suite_name = flask_migration_test_suite

# Log Configuration for Test Analysis (Section 6.6.2)
# -----------------------------------------------------------------------------
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Performance Testing Configuration
# -----------------------------------------------------------------------------
# Configuration for locust and apache-bench integration
timeout = 300
timeout_method = thread

# Test Data and Fixture Configuration
# -----------------------------------------------------------------------------
# Configuration for test data management and fixture handling
usefixtures = []

# Test Result and Reporting Configuration (Section 6.6.2)
# -----------------------------------------------------------------------------
# Enhanced reporting for comprehensive test analysis
html_report_path = tests/reports/test_report.html
html_report_title = Flask Migration Test Report

# Test Cleanup and Isolation
# -----------------------------------------------------------------------------
# Ensure complete test isolation and cleanup
clearcache = true

# Security and Quality Integration
# -----------------------------------------------------------------------------
# Markers for security scanning integration (bandit, safety)
security_scan_markers = [
    "security_scan",
    "vulnerability_test", 
    "penetration_test"
]

# Performance variance enforcement (Section 6.6.3 ≤10% requirement)
performance_variance_threshold = 10

# Test Environment Validation
# -----------------------------------------------------------------------------
# Environment-specific test configuration
testmon_off = false

# Filter warnings that are not actionable
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::UserWarning:flask.*
    error::pytest.PytestConfigWarning

# Docker and Container Integration (Testcontainers)
# -----------------------------------------------------------------------------
# Configuration for Testcontainers integration (Section 6.6.1)
docker_cleanup = true
container_timeout = 60

# Test Execution Optimization
# -----------------------------------------------------------------------------
# Cache configuration for improved test performance
cache_dir = .pytest_cache
disable_warnings = true

# Quality Gate Configuration (Section 6.6.3)
# -----------------------------------------------------------------------------
# Zero-tolerance quality enforcement
strict_markers = true
strict_config = true

# Test categorization for CI/CD pipeline integration
test_categories = {
    "unit": "tests/unit",
    "integration": "tests/integration", 
    "e2e": "tests/e2e",
    "performance": "tests/performance",
    "security": "tests/security"
}

# Migration-Specific Configuration
# -----------------------------------------------------------------------------
# Node.js parity validation settings
nodejs_baseline_path = tests/performance/baselines/nodejs_metrics.json
python_performance_threshold = 1.10  # 10% variance allowance

# External Service Mock Configuration
# -----------------------------------------------------------------------------
# Mock service endpoints for testing isolation
mock_auth0_endpoint = http://localhost:3001/mock-auth0
mock_aws_endpoint = http://localhost:3002/mock-aws

# Test Reporting Thresholds (Section 6.6.3)
# -----------------------------------------------------------------------------
# Quality metrics enforcement
coverage_html_report = true
coverage_xml_report = true
coverage_json_report = false

# Failure threshold configuration
max_failures_before_abort = 10
max_flaky_test_retries = 3

# Test Performance Monitoring
# -----------------------------------------------------------------------------
# Performance monitoring integration
enable_performance_tracking = true
performance_report_path = tests/reports/performance_report.json

# Database Testing Configuration
# -----------------------------------------------------------------------------
# MongoDB and Redis testing configuration
test_database_prefix = test_
test_redis_db = 15  # Use dedicated Redis DB for testing

# Test Matrix Configuration (Section 6.6.2 Python version matrix)
# -----------------------------------------------------------------------------
# Python version compatibility testing
python_version_matrix = ["3.8", "3.11"]
test_python_versions = true

# Final Configuration Validation
# -----------------------------------------------------------------------------
# Ensure all required testing components are configured
validate_test_environment = true
enforce_quality_gates = true