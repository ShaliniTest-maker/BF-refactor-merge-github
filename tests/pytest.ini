[tool:pytest]
# ============================================================================
# pytest Configuration for Flask Application Migration
# ============================================================================
# This configuration implements comprehensive testing standards for the
# Node.js to Python/Flask migration project, ensuring compliance with
# Section 6.6 Testing Strategy requirements and quality metrics.
#
# Key Requirements Implemented:
# - Minimum 90% code coverage enforcement (Section 6.6.3)
# - Flask-specific testing integration (Section 6.6.1)
# - Parallel test execution optimization (Section 6.6.1)
# - Asynchronous testing support for Motor operations (Section 6.6.1)
# - Static analysis and security scanning integration (Section 6.6.3)
# - Performance baseline validation (Section 6.6.3)
# ============================================================================

# Test Discovery and Collection
# ----------------------------------------------------------------------------
# Configure pytest to discover tests following Flask project structure
# and enterprise testing patterns per Section 6.6.1
minversion = 7.4.0
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Recursively search for tests in subdirectories
collect_ignore = [
    "node_modules",
    ".git",
    ".pytest_cache",
    "build",
    "dist",
    "__pycache__"
]

# Test Execution Configuration
# ----------------------------------------------------------------------------
# Enable parallel execution for performance optimization per Section 6.6.1
addopts = 
    # Parallel execution using pytest-xdist for distributed testing
    --numprocesses=auto
    --dist=loadfile
    
    # Coverage reporting with 90% minimum threshold enforcement
    --cov=src
    --cov-report=html:tests/coverage_html
    --cov-report=xml:tests/coverage.xml
    --cov-report=term-missing
    --cov-fail-under=90
    --cov-branch
    
    # Detailed test output and reporting per Section 6.6.2
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    
    # Performance and quality reporting
    --durations=10
    --durations-min=1.0
    
    # Flask-specific testing configuration
    --live-server-host=127.0.0.1
    --live-server-port=5000-5999
    
    # Enable async testing support for Motor operations
    --asyncio-mode=auto
    
    # Security and static analysis integration
    --flake8
    --mypy
    
    # Enhanced failure reporting and debugging
    --capture=no
    --showlocals
    --tb=long

# Test Markers Configuration
# ----------------------------------------------------------------------------
# Define test categories and execution patterns per Section 6.6.1
markers = 
    # Test categories based on testing strategy
    unit: Unit tests for isolated component testing
    integration: Integration tests for service interactions
    e2e: End-to-end tests for complete workflow validation
    performance: Performance tests for baseline comparison
    security: Security tests for vulnerability scanning
    
    # Component-specific test markers
    api: API endpoint testing (100% coverage requirement)
    auth: Authentication and authorization testing (95% coverage requirement)
    database: Database integration testing with Testcontainers
    cache: Redis caching integration testing
    external: External service integration testing
    
    # Performance and quality markers
    slow: Long-running tests requiring extended timeouts
    baseline: Performance baseline comparison tests
    load: Load testing scenarios using locust integration
    
    # Testing environment markers
    local: Local development environment tests
    ci: CI/CD pipeline tests
    docker: Containerized testing scenarios
    
    # Async testing markers for Motor operations
    async_db: Asynchronous database operations testing
    motor: Motor async driver specific tests

# Coverage Configuration
# ----------------------------------------------------------------------------
# Implement Section 6.6.3 coverage requirements with component-specific targets
[coverage:run]
source = src
branch = True
parallel = True
concurrency = multiprocessing

# Include patterns for comprehensive coverage
include = 
    src/*
    src/**/*

# Exclude test files and migrations from coverage calculation
omit = 
    tests/*
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[coverage:report]
# Enforce minimum coverage thresholds per Section 6.6.3
fail_under = 90
precision = 2
show_missing = True
skip_covered = False
skip_empty = True

# Coverage reporting configuration
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if False:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = tests/coverage_html
title = Flask Migration Test Coverage Report

[coverage:xml]
output = tests/coverage.xml

# Flask Testing Configuration
# ----------------------------------------------------------------------------
# Configure Flask-specific testing patterns per Section 6.6.1
flask_app = src.app:create_app
flask_config = tests.test_config.TestConfig

# Live server configuration for integration testing
live_server_host = 127.0.0.1
live_server_port = 5000-5999

# Asyncio Configuration
# ----------------------------------------------------------------------------
# Enable async testing support for Motor database operations per Section 6.6.1
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Timeout configuration for async operations
timeout = 300
timeout_method = thread

# Static Analysis Configuration
# ----------------------------------------------------------------------------
# Integrate flake8 and mypy per Section 6.6.3 static analysis requirements
flake8-max-line-length = 88
flake8-ignore = 
    E203  # whitespace before ':'
    W503  # line break before binary operator
    E501  # line too long (handled by black)

# MyPy configuration for strict type checking
mypy_enabled = True
mypy_strict_mode = True

# Security Scanning Configuration
# ----------------------------------------------------------------------------
# Integrate bandit security analysis per Section 6.6.3 security requirements
bandit_enabled = True
bandit_severity_level = medium
bandit_config_file = .bandit

# Performance Testing Configuration
# ----------------------------------------------------------------------------
# Configure performance testing integration per Section 6.6.3
performance_baseline_variance = 10
performance_timeout = 120
load_test_users = 100
load_test_duration = 60

# Database Testing Configuration
# ----------------------------------------------------------------------------
# Testcontainers integration for realistic database behavior per Section 6.6.1
testcontainers_enabled = True
mongodb_version = "7.0"
redis_version = "7.2"

# Connection pool configuration for testing
db_pool_size = 5
db_max_overflow = 10
cache_pool_size = 5

# Parallel Execution Configuration
# ----------------------------------------------------------------------------
# Optimize parallel test execution per Section 6.6.1 performance optimization
dist = loadfile
numprocesses = auto
maxfail = 5

# Worker configuration for distributed testing
worker_id = auto
shared_directory = tests/shared

# Test Environment Configuration
# ----------------------------------------------------------------------------
# Configure test environment isolation per Section 6.6.1
env_file = tests/.env.test
log_level = INFO
log_format = %(asctime)s - %(name)s - %(levelname)s - %(message)s

# External service mock configuration
mock_external_services = True
auth0_mock_enabled = True
aws_mock_enabled = True

# Test Data Management
# ----------------------------------------------------------------------------
# Configure test data generation and cleanup per Section 6.6.1
factory_boy_enabled = True
test_data_cleanup = True
fixture_scope = function

# Database seeding configuration
seed_test_data = True
data_isolation = True

# Reporting Configuration
# ----------------------------------------------------------------------------
# Enhanced test reporting per Section 6.6.2 test reporting requirements
junit_family = xunit2
junit_suite_name = flask_migration_tests

# Custom reporting formats
report_formats = 
    html
    xml
    json
    terminal

# Failure analysis configuration
failure_analysis = True
screenshot_on_failure = False
log_capture = True

# Quality Gates Configuration
# ----------------------------------------------------------------------------
# Implement quality gates per Section 6.6.3 quality metrics
quality_gates_enabled = True

# Coverage thresholds by component
coverage_api = 100
coverage_auth = 95
coverage_business = 95
coverage_integration = 90
coverage_overall = 90

# Performance thresholds
response_time_variance = 10
memory_usage_variance = 15
concurrent_request_baseline = True

# Security requirements
security_critical_findings = 0
security_high_findings = 0
security_scan_enabled = True

# Static analysis requirements
lint_errors_max = 0
type_check_errors_max = 0
complexity_threshold = 10

# Integration Test Configuration
# ----------------------------------------------------------------------------
# Configure comprehensive integration testing per Section 6.6.1
integration_timeout = 300
external_service_timeout = 30
auth_token_expiry = 3600

# Circuit breaker testing
circuit_breaker_failure_threshold = 5
circuit_breaker_recovery_timeout = 60

# Cache testing configuration
cache_ttl_test = 300
cache_eviction_test = True

# Logging Configuration
# ----------------------------------------------------------------------------
# Configure test logging per Section 6.6.2 test automation requirements
log_cli = True
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging configuration
log_file = tests/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Warning Configuration
# ----------------------------------------------------------------------------
# Control warning behavior during test execution
filterwarnings = 
    error
    ignore::UserWarning
    ignore::DeprecationWarning:pkg_resources.*
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning

# Performance Optimization
# ----------------------------------------------------------------------------
# Optimize test execution performance per Section 6.6.1
cache_dir = .pytest_cache
collect_ignore_glob = 
    **/migrations/**
    **/node_modules/**
    **/__pycache__/**

# Memory and resource management
worker_memory_limit = 1024MB
worker_timeout = 600
cleanup_on_exit = True

# Container Resource Management
# ----------------------------------------------------------------------------
# Configure resource limits for Testcontainers per Section 6.6.1
container_memory_limit = 512MB
container_cpu_limit = 2
container_cleanup_timeout = 30

# Network configuration for container testing
container_network_mode = bridge
container_publish_all_ports = False

# Test Data Persistence
# ----------------------------------------------------------------------------
# Configure test artifacts and data persistence
artifacts_dir = tests/artifacts
keep_artifacts = False
artifact_retention_days = 7

# Performance data collection
performance_data_dir = tests/performance/data
baseline_data_file = tests/performance/baseline.json
metrics_collection = True