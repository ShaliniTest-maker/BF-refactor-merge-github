# ============================================================================
# Flask Application Environment Configuration Template
# ============================================================================
# This file provides configuration examples for Flask application deployment
# as part of the Node.js to Python migration project. Contains all required
# environment variables for database connections, authentication, external
# services, and deployment configuration without sensitive values.
#
# IMPORTANT: This is a template file. Copy to .env and replace with actual values.
# Never commit actual credentials or sensitive values to version control.
# ============================================================================

# ============================================================================
# FLASK APPLICATION CONFIGURATION
# ============================================================================

# Flask core configuration - Replace with secure random key for production
SECRET_KEY=your-flask-secret-key-here-use-secrets.token-urlsafe-64

# Environment configuration for Flask application
FLASK_ENV=production
FLASK_DEBUG=False

# Application name and version for monitoring and logging
APP_NAME=flask-migration-app
APP_VERSION=1.0.0

# ============================================================================
# WSGI SERVER CONFIGURATION (Gunicorn/uWSGI)
# ============================================================================

# Gunicorn WSGI server configuration for production deployment
GUNICORN_WORKERS=4
GUNICORN_WORKER_CLASS=sync
GUNICORN_TIMEOUT=120
GUNICORN_KEEPALIVE=5
GUNICORN_MAX_REQUESTS=1000
GUNICORN_BIND=0.0.0.0:8000

# uWSGI alternative configuration
UWSGI_PROCESSES=4
UWSGI_THREADS=2
UWSGI_HTTP_TIMEOUT=120

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# MongoDB connection configuration (PyMongo/Motor)
MONGODB_URL=mongodb://username:password@localhost:27017/database_name
MONGODB_HOST=localhost
MONGODB_PORT=27017
MONGODB_USERNAME=your_mongodb_username
MONGODB_PASSWORD=your_mongodb_password
MONGODB_DATABASE=your_database_name
MONGODB_AUTH_SOURCE=admin

# MongoDB connection pool settings for optimal performance
MONGODB_MAX_POOL_SIZE=50
MONGODB_MIN_POOL_SIZE=10
MONGODB_WAIT_QUEUE_TIMEOUT_MS=30000
MONGODB_SERVER_SELECTION_TIMEOUT_MS=10000
MONGODB_CONNECT_TIMEOUT_MS=10000
MONGODB_SOCKET_TIMEOUT_MS=30000

# MongoDB TLS/SSL configuration for secure connections
MONGODB_TLS=True
MONGODB_TLS_CERT_FILE=/path/to/mongodb-client.pem
MONGODB_TLS_CA_FILE=/path/to/mongodb-ca.pem

# ============================================================================
# REDIS CACHE AND SESSION CONFIGURATION
# ============================================================================

# Redis connection configuration for caching and session management
REDIS_URL=redis://username:password@localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_USERNAME=your_redis_username
REDIS_PASSWORD=your_redis_password
REDIS_DB=0

# Redis SSL/TLS configuration
REDIS_SSL=False
REDIS_SSL_CERT_FILE=/path/to/redis-client.pem
REDIS_SSL_KEY_FILE=/path/to/redis-client-key.pem
REDIS_SSL_CA_CERTS=/path/to/redis-ca.pem

# Redis connection pool settings
REDIS_MAX_CONNECTIONS=50
REDIS_RETRY_ON_TIMEOUT=True
REDIS_SOCKET_TIMEOUT=30.0
REDIS_SOCKET_CONNECT_TIMEOUT=10.0
REDIS_HEALTH_CHECK_INTERVAL=30

# Session-specific Redis database
REDIS_SESSION_DB=1
REDIS_CACHE_DB=2
REDIS_LIMITER_DB=3

# ============================================================================
# AUTHENTICATION CONFIGURATION (Auth0 + JWT)
# ============================================================================

# Auth0 configuration for enterprise authentication
AUTH0_DOMAIN=your-domain.auth0.com
AUTH0_CLIENT_ID=your_auth0_client_id
AUTH0_CLIENT_SECRET=your_auth0_client_secret
AUTH0_AUDIENCE=your_api_audience
AUTH0_SCOPE=openid profile email

# Auth0 management API configuration
AUTH0_MANAGEMENT_CLIENT_ID=your_management_client_id
AUTH0_MANAGEMENT_CLIENT_SECRET=your_management_client_secret

# JWT token configuration
JWT_SECRET_KEY=your-jwt-secret-key-here
JWT_ALGORITHM=RS256
JWT_ACCESS_TOKEN_EXPIRES=3600
JWT_REFRESH_TOKEN_EXPIRES=604800

# Token validation cache TTL (seconds)
JWT_VALIDATION_CACHE_TTL=300

# ============================================================================
# SESSION MANAGEMENT CONFIGURATION
# ============================================================================

# Flask-Session configuration with Redis backend
SESSION_TYPE=redis
SESSION_PERMANENT=False
SESSION_USE_SIGNER=True
SESSION_KEY_PREFIX=session:
SESSION_COOKIE_SECURE=True
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax
SESSION_COOKIE_NAME=flask_session

# Session encryption configuration
SESSION_ENCRYPTION_KEY=base64-encoded-32-byte-key-for-session-encryption
REDIS_ENCRYPTION_KEY=base64-encoded-32-byte-key-for-redis-encryption

# ============================================================================
# AWS SERVICES CONFIGURATION
# ============================================================================

# AWS credentials for boto3 SDK
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
AWS_DEFAULT_REGION=us-east-1
AWS_REGION=us-east-1

# AWS S3 configuration for file storage
AWS_S3_BUCKET=your-s3-bucket-name
AWS_S3_REGION=us-east-1
AWS_S3_USE_SSL=True
AWS_S3_SIGNATURE_VERSION=s3v4

# AWS KMS configuration for encryption key management
AWS_KMS_CMK_ARN=arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
KMS_ROTATION_INTERVAL=90

# AWS CloudWatch configuration for monitoring
AWS_CLOUDWATCH_LOG_GROUP=/aws/flask/application
AWS_CLOUDWATCH_LOG_STREAM=application-logs

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# Encryption keys for data protection (base64 encoded 32-byte keys)
ENCRYPTION_KEY=base64-encoded-32-byte-encryption-key
DATA_ENCRYPTION_KEY=base64-encoded-32-byte-data-encryption-key
DATE_MASKING_SALT=random-salt-for-date-masking

# TLS/SSL certificate configuration
TLS_CERT_PATH=/path/to/certificate.pem
TLS_KEY_PATH=/path/to/private-key.pem
CA_CERT_PATH=/path/to/ca-certificate.pem

# Security headers configuration (Flask-Talisman)
HSTS_MAX_AGE=31536000
HSTS_INCLUDE_SUBDOMAINS=True
CSP_DEFAULT_SRC='self'
CSP_SCRIPT_SRC='self' 'unsafe-inline' https://cdn.auth0.com
CSP_STYLE_SRC='self' 'unsafe-inline'

# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# CORS allowed origins for Flask-CORS
CORS_ORIGINS=https://app.company.com,https://admin.company.com
CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOW_HEADERS=Authorization,Content-Type,X-Requested-With
CORS_EXPOSE_HEADERS=X-Auth-RateLimit-Limit,X-Auth-RateLimit-Remaining
CORS_SUPPORTS_CREDENTIALS=True
CORS_MAX_AGE=600

# ============================================================================
# RATE LIMITING CONFIGURATION
# ============================================================================

# Flask-Limiter configuration
RATE_LIMIT_STORAGE_URL=redis://localhost:6379/3
RATE_LIMIT_DEFAULT=1000 per hour; 100 per minute; 10 per second
RATE_LIMIT_STRATEGY=moving-window
RATE_LIMIT_HEADERS_ENABLED=True

# Endpoint-specific rate limits
RATE_LIMIT_AUTH=50 per minute
RATE_LIMIT_API=200 per minute
RATE_LIMIT_ADMIN=20 per minute

# ============================================================================
# EXTERNAL SERVICES CONFIGURATION
# ============================================================================

# Third-party API configurations with timeout settings
EXTERNAL_API_TIMEOUT=30
EXTERNAL_API_RETRY_ATTEMPTS=3
EXTERNAL_API_BACKOFF_FACTOR=1.0

# Circuit breaker configuration for external services
CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
CIRCUIT_BREAKER_RECOVERY_TIMEOUT=60
CIRCUIT_BREAKER_EXPECTED_EXCEPTION=RequestException

# HTTP client configuration
HTTP_CLIENT_POOL_CONNECTIONS=20
HTTP_CLIENT_POOL_MAXSIZE=50
HTTP_CLIENT_MAX_RETRIES=3

# HTTPX async client configuration
HTTPX_TIMEOUT_CONNECT=10.0
HTTPX_TIMEOUT_READ=30.0
HTTPX_TIMEOUT_WRITE=10.0
HTTPX_TIMEOUT_POOL=5.0
HTTPX_MAX_CONNECTIONS=100
HTTPX_MAX_KEEPALIVE_CONNECTIONS=50

# ============================================================================
# MONITORING AND OBSERVABILITY
# ============================================================================

# Structured logging configuration (structlog)
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_FILE_PATH=/var/log/flask-app/application.log
LOG_MAX_FILE_SIZE=10MB
LOG_BACKUP_COUNT=5

# Prometheus metrics configuration
PROMETHEUS_METRICS_PATH=/metrics
PROMETHEUS_METRICS_PORT=9090
PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc

# APM (Application Performance Monitoring) configuration
APM_SERVICE_NAME=flask-migration-app
APM_ENVIRONMENT=production
APM_VERSION=1.0.0

# New Relic configuration (if using New Relic)
NEW_RELIC_LICENSE_KEY=your_new_relic_license_key
NEW_RELIC_APP_NAME=Flask Migration App

# Datadog configuration (if using Datadog)
DATADOG_API_KEY=your_datadog_api_key
DATADOG_APP_KEY=your_datadog_app_key
DATADOG_SERVICE=flask-migration-app

# Health check endpoints configuration
HEALTH_CHECK_PATH=/health
HEALTH_READY_PATH=/health/ready
HEALTH_LIVE_PATH=/health/live

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================

# Test environment configuration
TEST_DATABASE_URL=mongodb://localhost:27017/test_database
TEST_REDIS_URL=redis://localhost:6379/15
TEST_SECRET_KEY=test-secret-key-for-testing-only
TEST_JWT_SECRET_KEY=test-jwt-secret-key

# Performance testing configuration
PERFORMANCE_BASELINE_VARIANCE_THRESHOLD=10
LOAD_TEST_CONCURRENT_USERS=100
LOAD_TEST_DURATION=300

# ============================================================================
# DEVELOPMENT ENVIRONMENT SETTINGS
# ============================================================================

# Development-specific configuration (not for production)
DEV_FLASK_DEBUG=True
DEV_FLASK_ENV=development
DEV_RELOAD=True
DEV_USE_DEBUGGER=True

# Development database settings
DEV_MONGODB_URL=mongodb://localhost:27017/dev_database
DEV_REDIS_URL=redis://localhost:6379/1

# Development CORS settings (more permissive)
DEV_CORS_ORIGINS=http://localhost:3000,http://localhost:8080
DEV_CORS_ALLOW_ALL_ORIGINS=True

# ============================================================================
# FEATURE FLAGS AND DEPLOYMENT
# ============================================================================

# Feature flag configuration for gradual migration
FEATURE_FLAG_BLUE_GREEN_DEPLOYMENT=True
FEATURE_FLAG_TRAFFIC_PERCENTAGE=100
FEATURE_FLAG_MIGRATION_MODE=complete

# Deployment configuration
DEPLOYMENT_STRATEGY=blue-green
ROLLBACK_ENABLED=True
CANARY_DEPLOYMENT_PERCENTAGE=5

# Container health check configuration
CONTAINER_HEALTH_CHECK_INTERVAL=30s
CONTAINER_HEALTH_CHECK_TIMEOUT=10s
CONTAINER_HEALTH_CHECK_RETRIES=3
CONTAINER_HEALTH_CHECK_START_PERIOD=5s

# ============================================================================
# COMPLIANCE AND AUDIT
# ============================================================================

# Audit logging configuration
AUDIT_LOG_ENABLED=True
AUDIT_LOG_LEVEL=INFO
AUDIT_LOG_FILE=/var/log/flask-app/audit.log
AUDIT_LOG_RETENTION_DAYS=90

# Compliance settings
SOC2_COMPLIANCE_MODE=True
GDPR_COMPLIANCE_MODE=True
PCI_DSS_COMPLIANCE_MODE=False

# Data retention and privacy settings
DATA_RETENTION_DAYS=2555  # 7 years
PII_ENCRYPTION_ENABLED=True
DATA_MASKING_ENABLED=True

# ============================================================================
# CACHE CONFIGURATION
# ============================================================================

# Application-level caching settings
CACHE_TYPE=redis
CACHE_DEFAULT_TIMEOUT=300
CACHE_KEY_PREFIX=app_cache:

# Permission caching configuration
PERMISSION_CACHE_TTL=300
ROLE_CACHE_TTL=600
RESOURCE_OWNER_CACHE_TTL=180
PERMISSION_HIERARCHY_CACHE_TTL=900

# JWT validation caching
JWT_CACHE_TTL=300
AUTH_CACHE_TTL=600

# ============================================================================
# ERROR HANDLING AND RECOVERY
# ============================================================================

# Error handling configuration
ERROR_LOG_LEVEL=ERROR
ERROR_NOTIFICATION_ENABLED=True
ERROR_NOTIFICATION_WEBHOOK=https://your-error-notification-webhook.com

# Circuit breaker configuration for database connections
DB_CIRCUIT_BREAKER_ENABLED=True
DB_CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
DB_CIRCUIT_BREAKER_RECOVERY_TIMEOUT=60

# Retry configuration for external services
RETRY_MAX_ATTEMPTS=3
RETRY_EXPONENTIAL_BASE=2
RETRY_MAX_DELAY=30
RETRY_JITTER=True

# ============================================================================
# PERFORMANCE TUNING
# ============================================================================

# Connection pool tuning
DB_POOL_SIZE=20
DB_POOL_OVERFLOW=30
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600

# Thread pool configuration
THREAD_POOL_MAX_WORKERS=20
ASYNC_WORKER_POOL_SIZE=50

# Garbage collection tuning
GC_THRESHOLD_0=700
GC_THRESHOLD_1=10
GC_THRESHOLD_2=10

# ============================================================================
# DOCUMENTATION AND METADATA
# ============================================================================

# Application metadata
APP_DESCRIPTION=Flask application migrated from Node.js
APP_CONTACT_EMAIL=devops@company.com
APP_LICENSE=Proprietary
APP_TERMS_OF_SERVICE=https://company.com/terms

# API documentation configuration
API_DOCS_URL=/docs
API_DOCS_TITLE=Flask Migration API
API_DOCS_VERSION=1.0.0
API_DOCS_DESCRIPTION=RESTful API for migrated Flask application

# ============================================================================
# END OF CONFIGURATION TEMPLATE
# ============================================================================

# SECURITY REMINDER:
# 1. Copy this file to .env and replace all placeholder values
# 2. Set proper file permissions: chmod 600 .env
# 3. Never commit .env files to version control
# 4. Use strong, randomly generated keys for all secret values
# 5. Rotate keys regularly according to security policies
# 6. Use environment-specific configurations for dev/staging/production
# 7. Consider using AWS Secrets Manager or HashiCorp Vault for production