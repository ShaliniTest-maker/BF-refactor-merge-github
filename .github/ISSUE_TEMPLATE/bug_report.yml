# Bug Report Template for Flask Migration Project
# =================================================
#
# Comprehensive issue tracking template designed for the BF-refactor-merge project
# converting Node.js server application to Python 3 using Flask framework.
# Integrates with CI/CD pipeline monitoring, performance validation, and security scanning
# per technical specification Section 0 migration requirements.
#
# Template Features:
# - Performance impact assessment supporting ≤10% variance requirement (Section 0.1.1)
# - Security consideration fields per Section 0.3.3 security review requirements
# - CI/CD pipeline integration context per Section 6.6.2 comprehensive testing strategy
# - Migration-specific context for Node.js to Python conversion tracking
# - Monitoring and observability integration per Section 6.5 requirements
# - Enterprise-grade issue classification and prioritization
#
# This template ensures comprehensive bug tracking throughout the migration process
# while maintaining integration with GitHub Actions workflows, performance monitoring,
# and security validation pipelines established in the project infrastructure.

name: "🐛 Bug Report - Flask Migration"
description: "Report a bug or issue in the Flask migration project with comprehensive context capture"
title: "[BUG] "
labels: 
  - "bug"
  - "flask-migration"
  - "needs-triage"

body:
  # =============================================================================
  # ISSUE SUMMARY AND CLASSIFICATION
  # =============================================================================
  
  - type: markdown
    attributes:
      value: |
        ## 🔍 Bug Report for Flask Migration Project
        
        **Thank you for reporting a bug!** This template captures comprehensive context for issues
        in the Node.js to Python Flask migration project, including performance impact assessment,
        security implications, and CI/CD pipeline integration details.
        
        **Please fill out all relevant sections** to help our team quickly identify, reproduce,
        and resolve the issue while maintaining the ≤10% performance variance requirement.

  - type: textarea
    id: bug-summary
    attributes:
      label: "📝 Bug Summary"
      description: "Clear, concise description of the bug and its impact on the Flask migration"
      placeholder: "Example: Authentication middleware causes 15% performance degradation compared to Node.js baseline"
    validations:
      required: true

  - type: dropdown
    id: severity
    attributes:
      label: "🚨 Severity Level"
      description: "Select the severity level based on business impact and migration requirements"
      options:
        - "🔥 Critical - Blocks migration deployment or causes >10% performance degradation"
        - "⚠️ High - Significant functionality issue or security concern"
        - "📊 Medium - Performance issue within variance threshold or feature gap"
        - "🔧 Low - Minor issue or cosmetic problem"
        - "📈 Enhancement - Improvement opportunity beyond baseline parity"
    validations:
      required: true

  - type: dropdown
    id: component
    attributes:
      label: "🏗️ Affected Component"
      description: "Select the primary component affected by this bug"
      options:
        - "🌐 API Layer - Flask Blueprints and routing"
        - "🔐 Authentication - JWT validation and Auth0 integration"
        - "💼 Business Logic - Core processing modules"
        - "🗄️ Database Layer - MongoDB/PyMongo operations"
        - "🚀 Caching - Redis integration and session management"
        - "🔗 External Services - AWS, Auth0, third-party integrations"
        - "⚡ Performance - Response time, memory, or throughput issues"
        - "🛡️ Security - Vulnerability or security policy violation"
        - "🐳 Infrastructure - Container, deployment, or environment issues"
        - "🔧 CI/CD Pipeline - GitHub Actions workflow issues"
        - "📊 Monitoring - Observability, metrics, or alerting problems"
        - "🧪 Testing - Test failures or coverage issues"
        - "📚 Documentation - Missing or incorrect documentation"
    validations:
      required: true

  # =============================================================================
  # MIGRATION-SPECIFIC CONTEXT
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ## 🔄 Migration Context
        
        **Migration-specific information** to understand the conversion impact and baseline comparison.

  - type: dropdown
    id: migration-stage
    attributes:
      label: "📍 Migration Stage"
      description: "What stage of the migration process is affected?"
      options:
        - "🏗️ Initial Flask Setup - Application factory and configuration"
        - "🛤️ Routing Migration - Express.js to Flask Blueprint conversion"
        - "🔐 Authentication Migration - JWT and Auth0 integration"
        - "💼 Business Logic Conversion - JavaScript to Python logic"
        - "🗄️ Database Driver Migration - Node.js MongoDB to PyMongo"
        - "🔗 External Service Migration - API client conversions"
        - "⚡ Performance Optimization - Baseline compliance tuning"
        - "🧪 Testing Implementation - Test suite conversion"
        - "🚀 Deployment Setup - CI/CD and infrastructure configuration"
        - "📊 Monitoring Integration - Observability implementation"
        - "✅ Production Validation - Live environment testing"
    validations:
      required: true

  - type: textarea
    id: nodejs-comparison
    attributes:
      label: "🔄 Node.js Baseline Comparison"
      description: |
        **Comparison with original Node.js behavior** (if applicable):
        - What was the expected behavior in the Node.js implementation?
        - How does the Flask implementation differ?
        - Include relevant Node.js code snippets or API responses
      placeholder: |
        Node.js baseline behavior:
        - Response time: ~150ms average
        - Memory usage: ~180MB steady state
        - API response format: {...}
        
        Flask implementation difference:
        - Response time: ~175ms average (+16.7% variance)
        - Memory usage: ~220MB steady state
        - Different response format or behavior...

  - type: dropdown
    id: performance-impact
    attributes:
      label: "📈 Performance Impact Assessment"
      description: "How does this bug affect performance compared to Node.js baseline?"
      options:
        - "✅ No Performance Impact - Functionality-only issue"
        - "📊 Within Threshold - <5% performance variance"
        - "⚠️ Approaching Threshold - 5-10% performance variance"
        - "🚨 Exceeds Threshold - >10% performance variance (CRITICAL)"
        - "🔍 Unknown Impact - Performance testing required"
        - "📈 Performance Improvement - Better than Node.js baseline"
    validations:
      required: true

  # =============================================================================
  # DETAILED BUG INFORMATION
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ## 🔍 Detailed Bug Information
        
        **Comprehensive details** for reproduction and investigation.

  - type: textarea
    id: environment
    attributes:
      label: "🌍 Environment Details"
      description: |
        **Environment and configuration information:**
        - Python version and environment
        - Flask version and key dependencies
        - Deployment environment (local/staging/production)
        - Container/infrastructure details
      placeholder: |
        - Python Version: 3.11.6
        - Flask Version: 2.3.3
        - Environment: staging/production/local
        - Container: python:3.11-slim
        - OS: Ubuntu 22.04
        - MongoDB Version: 7.0
        - Redis Version: 7.2
        - Key Dependencies: PyMongo 4.5.1, redis-py 5.0.1, PyJWT 2.8.0
      value: |
        - Python Version: 
        - Flask Version: 
        - Environment: 
        - Container: 
        - OS: 
        - MongoDB Version: 
        - Redis Version: 
        - Key Dependencies: 
    validations:
      required: true

  - type: textarea
    id: reproduction-steps
    attributes:
      label: "🔬 Steps to Reproduce"
      description: |
        **Detailed steps to reproduce the issue:**
        - Include specific API endpoints, request payloads, or user actions
        - Provide curl commands, test scripts, or code snippets
        - Note any specific conditions or timing requirements
      placeholder: |
        1. Start Flask application with: `python -m flask run`
        2. Send POST request to `/api/auth/login` with payload:
           ```json
           {
             "email": "test@example.com",
             "password": "securepassword"
           }
           ```
        3. Observe response time via browser dev tools or curl timing
        4. Compare with Node.js baseline performance data
        5. Note specific error or unexpected behavior
    validations:
      required: true

  - type: textarea
    id: expected-behavior
    attributes:
      label: "✅ Expected Behavior"
      description: |
        **What should happen based on:**
        - Node.js baseline functionality
        - Technical specification requirements
        - Business logic requirements
      placeholder: |
        Based on Node.js baseline:
        - Authentication should complete in ~150ms
        - Should return JWT token with 24-hour expiration
        - Response format should match: {"token": "...", "user": {...}}
        - Memory usage should remain stable
    validations:
      required: true

  - type: textarea
    id: actual-behavior
    attributes:
      label: "❌ Actual Behavior"
      description: |
        **What actually happens:**
        - Specific error messages or incorrect responses
        - Performance measurements (response time, memory usage)
        - Screenshots or logs if applicable
      placeholder: |
        Actual behavior observed:
        - Authentication takes ~175ms (+16.7% variance)
        - Returns 500 Internal Server Error
        - Error in logs: "pymongo.errors.ConnectionFailure: ..."
        - Memory usage spikes to 300MB during operation
    validations:
      required: true

  # =============================================================================
  # PERFORMANCE AND MONITORING DATA
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ## 📊 Performance and Monitoring Data
        
        **Performance metrics and monitoring context** for variance analysis and optimization.

  - type: textarea
    id: performance-metrics
    attributes:
      label: "⚡ Performance Metrics"
      description: |
        **Performance measurements and comparison data:**
        - Response times (mean, p95, p99)
        - Memory usage patterns
        - CPU utilization
        - Database query performance
        - Comparison with Node.js baseline if available
      placeholder: |
        Performance Measurements:
        - Response Time: 175ms (baseline: 150ms, +16.7% variance)
        - Memory Usage: 220MB (baseline: 180MB, +22% variance)
        - CPU Usage: 45% (baseline: 35%, +28% variance)
        - Database Query Time: 50ms (baseline: 40ms, +25% variance)
        - Throughput: 85 req/s (baseline: 100 req/s, -15% variance)
        
        Monitoring Dashboard Links:
        - Grafana: [link]
        - APM: [link]

  - type: textarea
    id: monitoring-context
    attributes:
      label: "📈 Monitoring and Alerting Context"
      description: |
        **Relevant monitoring data and alerts:**
        - Prometheus metrics or dashboard links
        - APM traces or error tracking
        - Log aggregation queries
        - Alert notifications received
      placeholder: |
        Monitoring Context:
        - Prometheus Alert: "FlaskResponseTimeHigh" triggered at 14:30 UTC
        - APM Trace: Slow database query in auth module (trace ID: abc123)
        - Log Query: level:ERROR AND service:flask-auth AND timestamp:[now-1h TO now]
        - Dashboard: https://grafana.example.com/d/flask-migration
        - Error Rate: 2.5% (above 1% threshold)

  # =============================================================================
  # SECURITY IMPLICATIONS
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ## 🛡️ Security Assessment
        
        **Security implications and risk assessment** per Section 0.3.3 security review requirements.

  - type: dropdown
    id: security-impact
    attributes:
      label: "🔒 Security Impact Level"
      description: "Does this bug have security implications?"
      options:
        - "✅ No Security Impact - Functionality or performance issue only"
        - "🔍 Security Review Needed - Potential security implications"
        - "⚠️ Security Risk - Identified vulnerability or exposure"
        - "🚨 Critical Security Issue - Immediate security concern"
        - "🛡️ Security Enhancement - Opportunity to improve security posture"
    validations:
      required: true

  - type: textarea
    id: security-details
    attributes:
      label: "🛡️ Security Details"
      description: |
        **Security-related information (if applicable):**
        - Authentication or authorization impact
        - Data exposure risks
        - Input validation concerns
        - Cryptographic operation issues
      placeholder: |
        Security Considerations:
        - JWT validation bypassed in certain conditions
        - Potential for SQL injection in user input
        - Sensitive data logged in error messages
        - Authentication bypass possible with specific payload
        - CORS configuration allows unauthorized origins

  # =============================================================================
  # CI/CD PIPELINE INTEGRATION
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ## 🚀 CI/CD Pipeline Context
        
        **GitHub Actions workflow context** and pipeline integration details per Section 6.6.2.

  - type: textarea
    id: pipeline-context
    attributes:
      label: "🔄 GitHub Actions Context"
      description: |
        **CI/CD pipeline information:**
        - Workflow run IDs where the issue was observed
        - Test failures or quality gate violations
        - Deployment environment and status
        - Pipeline logs or artifact references
      placeholder: |
        GitHub Actions Context:
        - Workflow Run: https://github.com/org/repo/actions/runs/123456789
        - Failed Jobs: "performance-tests", "security-scan"
        - Quality Gate: Coverage below 90% threshold
        - Environment: staging deployment failed
        - Test Results: 15 failures in integration test suite
        - Security Scan: 2 high-severity findings in bandit report
        - Performance Test: 12% variance exceeds 10% threshold

  - type: textarea
    id: test-failures
    attributes:
      label: "🧪 Test Failures and Quality Gates"
      description: |
        **Test execution and quality validation context:**
        - Unit test failures with stack traces
        - Integration test issues
        - Performance test variance results
        - Security scan findings
        - Static analysis violations
      placeholder: |
        Test Failures:
        - Unit Tests: test_auth_jwt_validation FAILED (AssertionError: Token validation failed)
        - Integration Tests: test_mongodb_connection FAILED (ConnectionRefused)
        - Performance Tests: Response time variance 12% (exceeds 10% threshold)
        - Security Scan: bandit found B102 (exec_used) in auth/utils.py:45
        - Static Analysis: mypy error in business/logic.py:123 (missing type annotation)
        - Coverage: 87% (below 90% requirement)

  # =============================================================================
  # TECHNICAL INVESTIGATION
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ## 🔍 Technical Investigation
        
        **Technical details and debugging information** for developer analysis.

  - type: textarea
    id: logs-stacktrace
    attributes:
      label: "📋 Logs and Stack Traces"
      description: |
        **Relevant log entries and error traces:**
        - Application logs with timestamps
        - Error stack traces
        - Database query logs
        - External service call logs
      placeholder: |
        Application Logs:
        ```
        2024-01-15 14:30:25,123 ERROR [flask-app] Authentication failed for user test@example.com
        2024-01-15 14:30:25,124 ERROR [pymongo] Connection timeout to MongoDB: 
        Traceback (most recent call last):
          File "/app/auth/handlers.py", line 45, in validate_jwt
            user = db.users.find_one({"email": payload["email"]})
          File "/usr/local/lib/python3.11/site-packages/pymongo/collection.py", line 633, in find_one
            raise ConnectionFailure("Connection timeout")
        pymongo.errors.ConnectionFailure: Connection timeout
        ```

  - type: textarea
    id: configuration
    attributes:
      label: "⚙️ Configuration Details"
      description: |
        **Relevant configuration that might affect the issue:**
        - Flask application configuration
        - Database connection settings
        - Environment variables
        - Container or deployment configuration
      placeholder: |
        Configuration Details:
        - MONGODB_URI: mongodb://mongo:27017/flask_app
        - REDIS_URL: redis://redis:6379/0
        - JWT_SECRET_KEY: [configured via environment]
        - AUTH0_DOMAIN: dev-example.auth0.com
        - FLASK_ENV: production
        - LOG_LEVEL: INFO
        - GUNICORN_WORKERS: 4
        - GUNICORN_TIMEOUT: 30

  - type: textarea
    id: additional-context
    attributes:
      label: "📝 Additional Context"
      description: |
        **Any other relevant information:**
        - Related issues or pull requests
        - Workarounds attempted
        - Business impact or urgency
        - External dependencies involved
      placeholder: |
        Additional Context:
        - Related to PR #123 (authentication module refactor)
        - Workaround: Manually restart MongoDB connection every hour
        - Business Impact: Blocks staging deployment scheduled for Friday
        - External Dependency: Auth0 tenant configuration may have changed
        - Similar issue reported in #456

  # =============================================================================
  # PRIORITY AND ASSIGNMENT
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ## 🎯 Issue Prioritization
        
        **Priority assessment and team assignment** for efficient resolution.

  - type: dropdown
    id: business-priority
    attributes:
      label: "📊 Business Priority"
      description: "Business impact and urgency for resolution"
      options:
        - "🔥 P0 - Blocks production deployment or critical functionality"
        - "⚠️ P1 - Affects core migration timeline or major features"
        - "📋 P2 - Important but doesn't block immediate progress"
        - "🔧 P3 - Nice to have or optimization opportunity"
    validations:
      required: true

  - type: dropdown
    id: affects-deployment
    attributes:
      label: "🚀 Deployment Impact"
      description: "Does this issue affect deployment readiness?"
      options:
        - "🚫 Blocks Deployment - Must be resolved before production release"
        - "⚠️ Risk to Deployment - Should be resolved but deployment possible with monitoring"
        - "📊 Monitoring Required - Deploy with enhanced monitoring and alerting"
        - "✅ No Deployment Impact - Can be resolved post-deployment"

  - type: checkboxes
    id: team-notification
    attributes:
      label: "👥 Team Notifications"
      description: "Select teams that should be notified about this issue"
      options:
        - label: "🏗️ Development Team - Core Flask migration development"
        - label: "⚡ Performance Engineering - Performance analysis and optimization"
        - label: "🛡️ Security Team - Security review and vulnerability assessment"
        - label: "🚀 DevOps Team - CI/CD pipeline and infrastructure issues"
        - label: "📊 Product Team - Business impact and feature validation"
        - label: "🔗 Integration Team - External service and API integration"

  # =============================================================================
  # MIGRATION TRACKING
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ## 📊 Migration Tracking
        
        **Migration progress tracking** and impact assessment for project management.

  - type: checkboxes
    id: migration-checklist
    attributes:
      label: "✅ Migration Impact Checklist"
      description: "Check all areas that this bug affects in the migration process"
      options:
        - label: "🎯 API Compatibility - Affects 100% API endpoint equivalence requirement"
        - label: "⚡ Performance Parity - Impacts ≤10% variance requirement"
        - label: "🔐 Security Compliance - Affects security posture or compliance"
        - label: "🗄️ Database Migration - Impacts MongoDB integration or data handling"
        - label: "🧪 Test Coverage - Affects test suite or quality gates"
        - label: "📚 Documentation - Requires documentation updates"
        - label: "🔄 Rollback Capability - Affects blue-green deployment or rollback procedures"
        - label: "📊 Monitoring Integration - Impacts observability or alerting"

  - type: textarea
    id: resolution-notes
    attributes:
      label: "🔧 Resolution Approach (Optional)"
      description: |
        **Suggested resolution approach or investigation direction:**
        - Potential root causes
        - Recommended investigation steps
        - Implementation suggestions
      placeholder: |
        Suggested Resolution:
        1. Investigate MongoDB connection pool configuration
        2. Review PyMongo vs Node.js driver connection handling differences
        3. Analyze connection timeout settings in production environment
        4. Consider implementing connection retry logic
        5. Update monitoring to track connection pool metrics
        6. Test with increased connection pool size

  # =============================================================================
  # TEMPLATE FOOTER
  # =============================================================================

  - type: markdown
    attributes:
      value: |
        ---
        
        ## 🤝 Next Steps
        
        After submitting this bug report:
        
        1. **Automatic Triage**: The issue will be automatically labeled and assigned based on severity and component
        2. **Performance Review**: If performance impact is indicated, the Performance Engineering team will be notified
        3. **Security Assessment**: Security-related issues will be routed to the Security team for review
        4. **CI/CD Integration**: Pipeline context will be used to correlate with workflow failures and test results
        5. **Migration Tracking**: The issue will be tracked against migration milestones and success criteria
        
        **For urgent issues (P0/Critical)**: Please also notify the team via Slack `#flask-migration-alerts` channel.
        
        **Thank you for helping ensure a successful Node.js to Flask migration!** 🚀