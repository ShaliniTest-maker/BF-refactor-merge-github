# GitHub Issue Template Configuration
# Flask Migration Project: Node.js to Python/Flask Migration
# 
# This configuration organizes issue templates for comprehensive project tracking
# per technical specification requirements (Section 6.6.2 Quality Gates).
# Integrates with existing CI/CD and quality assurance workflows.

blank_issues_enabled: false

contact_links:
  # Enterprise Project Management and Escalation Support
  - name: üö® Critical Security Issue (Private)
    url: https://github.com/security/advisories/new
    about: |
      Report critical security vulnerabilities privately through GitHub Security Advisories.
      For critical security issues requiring immediate attention per Section 0.3.3 Security Considerations.
      Triggers enterprise security review processes and SOC 2/ISO 27001 compliance workflows.
  
  - name: üìû Emergency Escalation Contact
    url: https://github.com/orgs/YOUR_ORG/discussions/categories/emergency-escalation
    about: |
      Emergency escalation for critical production issues blocking Flask migration progress.
      Available 24/7 for issues requiring immediate intervention and stakeholder notification.
      Use for: >10% performance variance, deployment failures, security breaches.
  
  - name: üéØ Migration Project Planning
    url: https://github.com/orgs/YOUR_ORG/projects/flask-migration
    about: |
      Flask Migration Project Board for sprint planning, milestone tracking, and resource coordination.
      Integrates with GitHub Actions CI/CD pipeline and automated quality gates per Section 6.6.2.
      View migration progress, component status, and performance metrics dashboard.
  
  - name: üìö Technical Documentation Hub
    url: https://github.com/YOUR_ORG/flask-migration-docs/wiki
    about: |
      Comprehensive technical documentation including API migration guides, performance baselines,
      security implementation patterns, and troubleshooting procedures per Section 0.3.4.
      Contains Node.js to Python conversion patterns and architectural decision records.
  
  - name: üîß CI/CD Pipeline Support
    url: https://github.com/YOUR_ORG/flask-migration/actions
    about: |
      GitHub Actions workflow monitoring, pipeline failures, and automated testing support.
      View performance testing results, security scan findings, and quality gate status.
      Includes manual approval gate integration per Section 6.6.2 test automation requirements.
  
  - name: üí¨ Team Collaboration & Questions
    url: https://github.com/orgs/YOUR_ORG/discussions/categories/flask-migration
    about: |
      General questions, implementation discussions, and team collaboration for Flask migration.
      Best practices sharing, architecture decisions, and cross-team coordination.
      Non-urgent technical questions and migration strategy discussions.
  
  - name: üìä Performance Monitoring Dashboard
    url: https://monitoring.your-domain.com/flask-migration
    about: |
      Real-time performance monitoring and baseline comparison dashboard.
      Track ‚â§10% variance requirement compliance, memory usage, and throughput metrics.
      Integrates with Prometheus metrics and APM tools per monitoring requirements.
  
  - name: üèóÔ∏è Architecture Review Board
    url: https://github.com/orgs/YOUR_ORG/discussions/categories/architecture-review
    about: |
      Technical architecture review requests for major Flask migration design decisions.
      Required for significant architectural changes per Section 6.6.2 Manual Approval Gates.
      Submit proposals for Blueprint organization, middleware patterns, and integration approaches.

# Issue Template Organization and Priority
# Templates are presented in order of frequency and urgency for Flask migration project
# This ordering optimizes workflow efficiency and ensures critical issues receive priority attention

# Template Priority Order:
# 1. üêõ Bug Report - Most common issue type during active migration
# 2. üöÄ Performance Issue - Critical for ‚â§10% variance requirement compliance
# 3. üîí Security Issue - High priority for enterprise compliance (SOC 2/ISO 27001)
# 4. üöÄ Feature Request - Enhancement proposals for migration improvements

# Quality Assurance Integration:
# - All issue templates integrate with GitHub Actions CI/CD pipeline workflows
# - Performance issues trigger automated baseline comparison and variance calculation
# - Security issues activate automated security review workflows and compliance tracking
# - Bug reports include comprehensive migration context and Node.js baseline comparison
# - Feature requests require performance impact assessment and testing strategy validation

# Workflow Integration Points:
# - Issue creation triggers appropriate GitHub Actions workflow notifications
# - Labels automatically route issues to correct teams (performance, security, migration)
# - Project assignment ensures issues are tracked in Flask migration project board
# - Assignee integration routes issues based on component categories and expertise areas
# - Manual approval gate integration for production deployment decisions

# Enterprise Project Management Features:
# - Escalation procedures through contact links for critical issues
# - Compliance tracking integration for SOC 2 and ISO 27001 requirements
# - Performance variance monitoring with automated alerting
# - Security review automation with mandatory approval gates
# - Cross-team coordination through structured issue categorization

# Migration-Specific Enhancements:
# - Node.js baseline comparison fields in performance and bug templates
# - Migration phase tracking for systematic component conversion progress
# - Flask-specific component categorization (Blueprints, middleware, authentication)
# - Python version compatibility tracking (3.8+ runtime requirements)
# - Dependency migration tracking from NPM to pip package ecosystem

# This configuration implements comprehensive issue management per Flask Migration
# Technical Specification requirements while supporting enterprise-grade project
# management, quality assurance, and escalation procedures for successful
# Node.js to Python/Flask migration completion.