# GitHub Actions Performance Testing and Validation Workflow
# ===========================================================
#
# Comprehensive performance testing pipeline implementing Locust 2.17+ load testing,
# k6 performance analysis, automated baseline comparison with Node.js implementation,
# and ≤10% variance requirement enforcement with automated rollback triggers per
# critical project requirements from Section 0.1.1 and Section 8.5.2.
#
# This workflow ensures Flask application performance maintains equivalence with
# the original Node.js implementation through rigorous automated testing,
# statistical analysis, and deployment gating mechanisms.
#
# Key Features:
# - Locust 2.17+ distributed load testing with realistic user behavior simulation
# - k6 performance analysis for detailed metrics collection and statistical analysis
# - Automated baseline comparison ensuring ≤10% variance from Node.js implementation
# - Performance gate enforcement with deployment blocking on performance degradation
# - Load testing progression with concurrent user scaling validation (10-1000 users)
# - Performance monitoring integration with Prometheus metrics collection
# - Performance regression detection with automated alerting and trend analysis
# - Performance optimization automation with CI pipeline integration
# - Comprehensive performance reporting with variance calculation and baseline updates

name: Performance Testing and Validation

# Trigger Configuration
# ====================
# Performance testing triggers for different workflow scenarios including
# pull requests, main branch commits, scheduled performance regression testing,
# and manual workflow dispatch for emergency performance validation

on:
  # Pull request performance validation
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
    paths:
      - 'src/**'
      - 'tests/performance/**'
      - 'requirements.txt'
      - '.github/workflows/performance.yml'
    
  # Main branch performance baseline validation
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/performance/**'
      - 'requirements.txt'
    
  # Scheduled performance regression testing
  schedule:
    # Daily performance regression testing at 3 AM UTC
    - cron: '0 3 * * *'
    # Weekly comprehensive performance analysis on Sundays at 1 AM UTC
    - cron: '0 1 * * 0'
    
  # Manual workflow dispatch for on-demand performance testing
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Target environment for performance testing'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - development
      user_load_max:
        description: 'Maximum concurrent users for load testing'
        required: false
        default: '1000'
        type: string
      test_duration:
        description: 'Test duration in seconds'
        required: false
        default: '600'
        type: string
      baseline_comparison:
        description: 'Enable baseline comparison validation'
        required: false
        default: true
        type: boolean
      performance_optimization:
        description: 'Enable automated performance optimization loop'
        required: false
        default: true
        type: boolean
      alert_on_regression:
        description: 'Enable performance regression alerting'
        required: false
        default: true
        type: boolean

# Environment Variables
# =====================
# Global environment configuration for consistent performance testing execution
# and enterprise-grade performance validation requirements

env:
  # Performance testing configuration per Section 0.1.1 and Section 8.5.2
  PERFORMANCE_VARIANCE_THRESHOLD: 10  # ≤10% variance requirement
  BASELINE_COMPARISON_ENABLED: true
  PERFORMANCE_GATE_ENFORCEMENT: true
  
  # Load testing configuration per Section 6.6.3
  LOCUST_VERSION: '2.17.0'
  K6_VERSION: '0.46.0'
  MIN_CONCURRENT_USERS: 10
  MAX_CONCURRENT_USERS: 1000
  RAMP_UP_DURATION: 300  # 5 minutes
  SUSTAINED_LOAD_DURATION: 600  # 10 minutes
  RAMP_DOWN_DURATION: 180  # 3 minutes
  
  # Performance thresholds per Section 4.4.2
  RESPONSE_TIME_P95_THRESHOLD: 500  # 95th percentile < 500ms
  RESPONSE_TIME_P99_THRESHOLD: 1000  # 99th percentile < 1000ms
  ERROR_RATE_THRESHOLD: 0.01  # Error rate < 1%
  THROUGHPUT_MIN_RPS: 100  # Minimum 100 requests/second
  
  # Monitoring configuration per Section 3.6.2
  PROMETHEUS_METRICS_ENABLED: true
  PERFORMANCE_MONITORING_INTERVAL: 5  # 5 second intervals
  METRICS_RETENTION_DAYS: 30
  
  # Baseline data configuration per Section 0.3.2
  NODEJS_BASELINE_BRANCH: 'nodejs-baseline'
  BASELINE_DATA_PATH: 'tests/performance/baseline_data.json'
  PERFORMANCE_REPORTS_PATH: 'reports/performance'
  
  # CI/CD integration configuration per Section 8.5.2
  DEPLOYMENT_GATE_ENABLED: true
  ROLLBACK_ON_FAILURE: true
  OPTIMIZATION_LOOP_ENABLED: true
  
  # Notification configuration
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
  PERFORMANCE_ALERT_CHANNELS: ${{ secrets.PERFORMANCE_ALERT_CHANNELS }}
  
  # Container and service configuration
  FLASK_CONTAINER_NAME: flask-app-performance
  FLASK_PORT: 5000
  MONGODB_URI: mongodb://localhost:27017/performance_test
  REDIS_URL: redis://localhost:6379/1
  
  # Testing framework configuration
  TESTCONTAINERS_RYUK_DISABLED: false
  PERFORMANCE_TEST_TIMEOUT: 3600  # 1 hour timeout
  PARALLEL_TEST_WORKERS: 4

# Pipeline Jobs
# =============
# Comprehensive performance testing job definition implementing enterprise-grade
# performance validation pipeline with automated baseline comparison and deployment gating

jobs:
  # ==========================================================================
  # PERFORMANCE SETUP AND VALIDATION JOB
  # ==========================================================================
  # Performance testing environment initialization and configuration validation
  
  performance-setup:
    name: 🏗️ Performance Setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      test-environment: ${{ steps.config.outputs.environment }}
      max-users: ${{ steps.config.outputs.max-users }}
      test-duration: ${{ steps.config.outputs.duration }}
      baseline-enabled: ${{ steps.config.outputs.baseline-enabled }}
      optimization-enabled: ${{ steps.config.outputs.optimization-enabled }}
      performance-cache-key: ${{ steps.cache-key.outputs.key }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for baseline comparison
          
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📊 Generate performance cache key
        id: cache-key
        run: |
          echo "key=performance-${{ runner.os }}-${{ hashFiles('requirements.txt', 'tests/performance/**/*.py', '.github/workflows/performance.yml') }}" >> $GITHUB_OUTPUT
          
      - name: 🗃️ Cache performance testing dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/k6
            /tmp/performance-tools
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            performance-${{ runner.os }}-
            
      - name: ⚙️ Configure performance testing parameters
        id: config
        run: |
          # Determine test environment
          if [[ "${{ github.event.inputs.test_environment }}" != "" ]]; then
            echo "environment=${{ github.event.inputs.test_environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
          
          # Configure load testing parameters
          MAX_USERS="${{ github.event.inputs.user_load_max }}"
          echo "max-users=${MAX_USERS:-${{ env.MAX_CONCURRENT_USERS }}}" >> $GITHUB_OUTPUT
          
          DURATION="${{ github.event.inputs.test_duration }}"
          echo "duration=${DURATION:-${{ env.SUSTAINED_LOAD_DURATION }}}" >> $GITHUB_OUTPUT
          
          # Configure baseline comparison
          BASELINE="${{ github.event.inputs.baseline_comparison }}"
          echo "baseline-enabled=${BASELINE:-${{ env.BASELINE_COMPARISON_ENABLED }}}" >> $GITHUB_OUTPUT
          
          # Configure optimization loop
          OPTIMIZATION="${{ github.event.inputs.performance_optimization }}"
          echo "optimization-enabled=${OPTIMIZATION:-${{ env.OPTIMIZATION_LOOP_ENABLED }}}" >> $GITHUB_OUTPUT
          
      - name: 📦 Install performance testing tools
        run: |
          python -m pip install --upgrade pip
          
          # Install Locust for load testing
          pip install locust==${{ env.LOCUST_VERSION }}
          
          # Install additional performance testing dependencies
          pip install httpx==0.25.2 aiohttp==3.9.1 requests==2.31.0
          pip install prometheus-client==0.17.1 psutil==5.9.6
          pip install pandas==2.1.4 numpy==1.25.2 matplotlib==3.8.2
          pip install jinja2==3.1.2 pyyaml==6.0.1
          
          # Install application dependencies
          pip install -r requirements.txt
          
          echo "✅ Locust ${{ env.LOCUST_VERSION }} installation completed"
          
      - name: 🔧 Install k6 for performance analysis
        run: |
          # Install k6 for detailed performance metrics
          curl -fsSL https://github.com/grafana/k6/releases/download/v${{ env.K6_VERSION }}/k6-v${{ env.K6_VERSION }}-linux-amd64.tar.gz | \
            tar -xz --strip-components=1 -C /tmp
          sudo mv /tmp/k6 /usr/local/bin/
          
          # Verify k6 installation
          k6 version
          echo "✅ k6 ${{ env.K6_VERSION }} installation completed"
          
      - name: 🔍 Validate performance testing configuration
        run: |
          echo "## 🏗️ Performance Testing Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Test Environment | ${{ steps.config.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Max Concurrent Users | ${{ steps.config.outputs.max-users }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Duration | ${{ steps.config.outputs.duration }}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Variance Threshold | ≤${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Baseline Comparison | ${{ steps.config.outputs.baseline-enabled }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Optimization Loop | ${{ steps.config.outputs.optimization-enabled }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Error Rate Threshold | <${{ env.ERROR_RATE_THRESHOLD }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Min Throughput | ≥${{ env.THROUGHPUT_MIN_RPS }} RPS |" >> $GITHUB_STEP_SUMMARY
          
          # Validate performance test files exist
          if [[ ! -f "tests/performance/locust_test.py" ]] && [[ ! -f "tests/performance/locustfile.py" ]]; then
            echo "❌ **ERROR**: Locust test file not found" >> $GITHUB_STEP_SUMMARY
            echo "Expected: tests/performance/locust_test.py or tests/performance/locustfile.py" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if [[ ! -f "tests/performance/k6_test.js" ]]; then
            echo "⚠️ **WARNING**: k6 test file not found - creating default configuration" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "✅ **SUCCESS**: Performance testing configuration validated" >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # APPLICATION STARTUP JOB
  # ==========================================================================
  # Flask application startup for performance testing with service dependencies
  
  app-startup:
    name: 🚀 Application Startup
    runs-on: ubuntu-latest
    needs: performance-setup
    timeout-minutes: 20
    
    services:
      # MongoDB service for database operations
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      # Redis service for caching
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    outputs:
      app-url: ${{ steps.startup.outputs.app-url }}
      health-check-url: ${{ steps.startup.outputs.health-url }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 🗃️ Restore performance cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/k6
            /tmp/performance-tools
          key: ${{ needs.performance-setup.outputs.performance-cache-key }}
          restore-keys: |
            performance-${{ runner.os }}-
            
      - name: 📦 Install application dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn==21.2.0  # Production WSGI server
          
      - name: 🐳 Wait for services to be ready
        run: |
          echo "⏳ Waiting for services to be ready..."
          
          # Wait for MongoDB
          timeout 60 bash -c 'until nc -z localhost 27017; do sleep 2; done'
          echo "✅ MongoDB service ready"
          
          # Wait for Redis
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 2; done'
          echo "✅ Redis service ready"
          
          # Verify service connectivity
          python -c "
          import pymongo
          import redis
          
          # Test MongoDB connection
          mongo_client = pymongo.MongoClient('${{ env.MONGODB_URI }}')
          mongo_client.admin.command('ping')
          print('✅ MongoDB connection verified')
          
          # Test Redis connection
          redis_client = redis.from_url('${{ env.REDIS_URL }}')
          redis_client.ping()
          print('✅ Redis connection verified')
          "
          
      - name: 🚀 Start Flask application for performance testing
        id: startup
        env:
          FLASK_ENV: production
          FLASK_APP: src.app:create_app
          MONGODB_URI: ${{ env.MONGODB_URI }}
          REDIS_URL: ${{ env.REDIS_URL }}
          PERFORMANCE_TESTING: true
          PROMETHEUS_METRICS_ENABLED: ${{ env.PROMETHEUS_METRICS_ENABLED }}
        run: |
          echo "🚀 Starting Flask application with Gunicorn..."
          
          # Start Flask application with production configuration
          gunicorn \
            --bind 0.0.0.0:${{ env.FLASK_PORT }} \
            --workers 4 \
            --worker-class sync \
            --worker-connections 1000 \
            --max-requests 10000 \
            --max-requests-jitter 1000 \
            --timeout 30 \
            --keep-alive 5 \
            --access-logfile - \
            --error-logfile - \
            --log-level info \
            --capture-output \
            --enable-stdio-inheritance \
            --daemon \
            'src.app:create_app()' || {
            echo "❌ Failed to start Flask application"
            exit 1
          }
          
          # Store Gunicorn PID for cleanup
          GUNICORN_PID=$(pgrep -f gunicorn)
          echo "GUNICORN_PID=$GUNICORN_PID" >> $GITHUB_ENV
          
          # Configure output URLs
          APP_URL="http://localhost:${{ env.FLASK_PORT }}"
          HEALTH_URL="$APP_URL/health"
          
          echo "app-url=$APP_URL" >> $GITHUB_OUTPUT
          echo "health-url=$HEALTH_URL" >> $GITHUB_OUTPUT
          
          # Wait for application to be ready
          echo "⏳ Waiting for Flask application to be ready..."
          timeout 120 bash -c "until curl -f -s $HEALTH_URL; do sleep 3; done" || {
            echo "❌ Flask application failed to start within timeout"
            echo "Checking application logs:"
            ps aux | grep gunicorn
            curl -v $HEALTH_URL || true
            exit 1
          }
          
          echo "✅ Flask application ready at $APP_URL"
          echo "✅ Health check endpoint: $HEALTH_URL"
          
      - name: 🔍 Validate application readiness
        run: |
          echo "## 🚀 Application Startup Status" >> $GITHUB_STEP_SUMMARY
          
          # Health check validation
          HEALTH_RESPONSE=$(curl -s "${{ steps.startup.outputs.health-url }}")
          echo "### Health Check Response:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo "$HEALTH_RESPONSE" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Basic endpoint validation
          ENDPOINTS=("/health" "/api/health" "/metrics")
          echo "### Endpoint Validation:" >> $GITHUB_STEP_SUMMARY
          echo "| Endpoint | Status | Response Time |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|---------------|" >> $GITHUB_STEP_SUMMARY
          
          for endpoint in "${ENDPOINTS[@]}"; do
            URL="${{ steps.startup.outputs.app-url }}$endpoint"
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$URL" 2>/dev/null || echo "N/A")
            STATUS=$(curl -o /dev/null -s -w "%{http_code}" "$URL" 2>/dev/null || echo "N/A")
            echo "| $endpoint | $STATUS | ${RESPONSE_TIME}s |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Application Status**: Ready for performance testing" >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # BASELINE COMPARISON PREPARATION JOB
  # ==========================================================================
  # Node.js baseline data loading and validation for performance comparison
  
  baseline-preparation:
    name: 📊 Baseline Preparation
    runs-on: ubuntu-latest
    needs: [performance-setup]
    if: needs.performance-setup.outputs.baseline-enabled == 'true'
    timeout-minutes: 10
    
    outputs:
      baseline-available: ${{ steps.baseline.outputs.available }}
      baseline-data-path: ${{ steps.baseline.outputs.data-path }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📊 Load and validate baseline data
        id: baseline
        run: |
          echo "## 📊 Node.js Baseline Data Preparation" >> $GITHUB_STEP_SUMMARY
          
          # Check if baseline validation script exists
          if [[ -f "tests/performance/baseline_validator.py" ]]; then
            python -m pip install --upgrade pip
            pip install pydantic pandas numpy
            
            # Load and validate baseline data
            python tests/performance/baseline_validator.py \
              --baseline-path "${{ env.BASELINE_DATA_PATH }}" \
              --output-summary baseline_summary.json \
              --validate-thresholds || {
              echo "❌ **ERROR**: Baseline data validation failed" >> $GITHUB_STEP_SUMMARY
              echo "available=false" >> $GITHUB_OUTPUT
              exit 1
            }
            
            echo "✅ **SUCCESS**: Baseline data validated" >> $GITHUB_STEP_SUMMARY
            echo "available=true" >> $GITHUB_OUTPUT
            echo "data-path=${{ env.BASELINE_DATA_PATH }}" >> $GITHUB_OUTPUT
            
            # Display baseline summary
            if [[ -f "baseline_summary.json" ]]; then
              echo "### Node.js Performance Baseline:" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              cat baseline_summary.json >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **WARNING**: Baseline validator not found - using default data" >> $GITHUB_STEP_SUMMARY
            echo "available=false" >> $GITHUB_OUTPUT
          fi

  # ==========================================================================
  # LOCUST LOAD TESTING JOB
  # ==========================================================================
  # Comprehensive load testing with Locust 2.17+ and user behavior simulation
  
  locust-load-testing:
    name: 🦗 Locust Load Testing
    runs-on: ubuntu-latest
    needs: [performance-setup, app-startup]
    timeout-minutes: 45
    
    outputs:
      locust-results-path: ${{ steps.load-test.outputs.results-path }}
      performance-summary: ${{ steps.load-test.outputs.summary }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 🗃️ Restore performance cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/k6
            /tmp/performance-tools
          key: ${{ needs.performance-setup.outputs.performance-cache-key }}
          restore-keys: |
            performance-${{ runner.os }}-
            
      - name: 📦 Install Locust and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust==${{ env.LOCUST_VERSION }}
          pip install pandas numpy matplotlib requests
          pip install -r requirements.txt
          
      - name: 🔧 Prepare Locust test configuration
        run: |
          # Create reports directory
          mkdir -p ${{ env.PERFORMANCE_REPORTS_PATH }}/locust
          
          # Create default Locust test if not exists
          if [[ ! -f "tests/performance/locust_test.py" ]] && [[ ! -f "tests/performance/locustfile.py" ]]; then
            echo "Creating default Locust test configuration..."
            cat > tests/performance/locust_test.py << 'EOF'
          from locust import HttpUser, task, between
          import json
          import os
          
          class FlaskAppUser(HttpUser):
              wait_time = between(1, 3)
              
              def on_start(self):
                  """Initialize user session"""
                  # Perform any setup like authentication
                  pass
              
              @task(3)
              def test_health_endpoint(self):
                  """Test health check endpoint"""
                  with self.client.get("/health", catch_response=True) as response:
                      if response.status_code == 200:
                          response.success()
                      else:
                          response.failure(f"Health check failed: {response.status_code}")
              
              @task(2)
              def test_api_endpoints(self):
                  """Test main API endpoints"""
                  endpoints = ["/api/health", "/metrics"]
                  for endpoint in endpoints:
                      with self.client.get(endpoint, catch_response=True) as response:
                          if response.status_code in [200, 404]:  # 404 is acceptable for non-existent endpoints
                              response.success()
                          else:
                              response.failure(f"API endpoint {endpoint} failed: {response.status_code}")
              
              @task(1)
              def test_complex_operations(self):
                  """Test more complex operations if endpoints exist"""
                  # Test database operations, file uploads, etc.
                  pass
          EOF
          fi
          
          # Use existing test file
          LOCUST_FILE=""
          if [[ -f "tests/performance/locust_test.py" ]]; then
            LOCUST_FILE="tests/performance/locust_test.py"
          elif [[ -f "tests/performance/locustfile.py" ]]; then
            LOCUST_FILE="tests/performance/locustfile.py"
          fi
          
          echo "LOCUST_FILE=$LOCUST_FILE" >> $GITHUB_ENV
          echo "✅ Locust test file: $LOCUST_FILE"
          
      - name: 🦗 Execute Locust load testing
        id: load-test
        env:
          APP_URL: ${{ needs.app-startup.outputs.app-url }}
        run: |
          echo "## 🦗 Locust Load Testing Execution" >> $GITHUB_STEP_SUMMARY
          echo "Testing progressive load scaling from ${{ env.MIN_CONCURRENT_USERS }} to ${{ needs.performance-setup.outputs.max-users }} users" >> $GITHUB_STEP_SUMMARY
          
          # Configure load testing parameters
          MAX_USERS="${{ needs.performance-setup.outputs.max-users }}"
          DURATION="${{ needs.performance-setup.outputs.duration }}"
          SPAWN_RATE=5
          
          echo "### Load Testing Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **Target URL**: $APP_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Max Users**: $MAX_USERS" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: ${DURATION}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Spawn Rate**: $SPAWN_RATE users/second" >> $GITHUB_STEP_SUMMARY
          
          # Execute Locust load test
          echo "🚀 Starting Locust load testing..."
          locust \
            --headless \
            --users "$MAX_USERS" \
            --spawn-rate "$SPAWN_RATE" \
            --run-time "${DURATION}s" \
            --host "$APP_URL" \
            --csv "${{ env.PERFORMANCE_REPORTS_PATH }}/locust/results" \
            --html "${{ env.PERFORMANCE_REPORTS_PATH }}/locust/report.html" \
            --logfile "${{ env.PERFORMANCE_REPORTS_PATH }}/locust/locust.log" \
            --loglevel INFO \
            --exit-code-on-error 1 \
            -f "$LOCUST_FILE" || {
            
            echo "❌ **LOAD TEST FAILURE**: Locust load testing failed" >> $GITHUB_STEP_SUMMARY
            echo "Check Locust logs for detailed error analysis" >> $GITHUB_STEP_SUMMARY
            
            # Display error logs
            if [[ -f "${{ env.PERFORMANCE_REPORTS_PATH }}/locust/locust.log" ]]; then
              echo "### Error Logs:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              tail -50 "${{ env.PERFORMANCE_REPORTS_PATH }}/locust/locust.log" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            exit 1
          }
          
          echo "✅ **SUCCESS**: Locust load testing completed" >> $GITHUB_STEP_SUMMARY
          
          # Parse and summarize results
          if [[ -f "${{ env.PERFORMANCE_REPORTS_PATH }}/locust/results_stats.csv" ]]; then
            echo "### Load Testing Results:" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics using Python
            python3 << 'EOF'
          import csv
          import json
          
          try:
              with open('${{ env.PERFORMANCE_REPORTS_PATH }}/locust/results_stats.csv', 'r') as f:
                  reader = csv.DictReader(f)
                  total_stats = None
                  for row in reader:
                      if row['Name'] == 'Aggregated':
                          total_stats = row
                          break
              
              if total_stats:
                  summary = {
                      'total_requests': int(total_stats['Request Count']),
                      'failure_count': int(total_stats['Failure Count']),
                      'avg_response_time': float(total_stats['Average Response Time']),
                      'p50_response_time': float(total_stats['50%']),
                      'p95_response_time': float(total_stats['95%']),
                      'p99_response_time': float(total_stats['99%']),
                      'requests_per_second': float(total_stats['Requests/s']),
                      'error_rate': (int(total_stats['Failure Count']) / int(total_stats['Request Count'])) * 100 if int(total_stats['Request Count']) > 0 else 0
                  }
                  
                  print(f"- **Total Requests**: {summary['total_requests']:,}")
                  print(f"- **Failed Requests**: {summary['failure_count']:,}")
                  print(f"- **Error Rate**: {summary['error_rate']:.2f}%")
                  print(f"- **Average Response Time**: {summary['avg_response_time']:.2f}ms")
                  print(f"- **95th Percentile**: {summary['p95_response_time']:.2f}ms")
                  print(f"- **99th Percentile**: {summary['p99_response_time']:.2f}ms")
                  print(f"- **Throughput**: {summary['requests_per_second']:.2f} RPS")
                  
                  # Save summary for next steps
                  with open('locust_summary.json', 'w') as f:
                      json.dump(summary, f, indent=2)
              else:
                  print("No aggregated statistics found")
          except Exception as e:
              print(f"Error parsing results: {e}")
          EOF
          fi >> $GITHUB_STEP_SUMMARY
          
          # Set outputs
          echo "results-path=${{ env.PERFORMANCE_REPORTS_PATH }}/locust" >> $GITHUB_OUTPUT
          if [[ -f "locust_summary.json" ]]; then
            echo "summary=$(cat locust_summary.json)" >> $GITHUB_OUTPUT
          fi

  # ==========================================================================
  # K6 PERFORMANCE ANALYSIS JOB
  # ==========================================================================
  # Detailed performance metrics collection and statistical analysis with k6
  
  k6-performance-analysis:
    name: ⚡ k6 Performance Analysis
    runs-on: ubuntu-latest
    needs: [performance-setup, app-startup]
    timeout-minutes: 30
    
    outputs:
      k6-results-path: ${{ steps.k6-test.outputs.results-path }}
      k6-metrics-summary: ${{ steps.k6-test.outputs.metrics-summary }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🗃️ Restore performance cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/k6
            /tmp/performance-tools
          key: ${{ needs.performance-setup.outputs.performance-cache-key }}
          restore-keys: |
            performance-${{ runner.os }}-
            
      - name: 🔧 Prepare k6 test configuration
        run: |
          # Create reports directory
          mkdir -p ${{ env.PERFORMANCE_REPORTS_PATH }}/k6
          
          # Create default k6 test if not exists
          if [[ ! -f "tests/performance/k6_test.js" ]]; then
            echo "Creating default k6 test configuration..."
            cat > tests/performance/k6_test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate, Trend, Counter } from 'k6/metrics';
          
          // Custom metrics
          const errorRate = new Rate('error_rate');
          const responseTime = new Trend('response_time');
          const requestCount = new Counter('request_count');
          
          // Test configuration
          export let options = {
            stages: [
              { duration: '2m', target: 10 },    // Ramp-up to 10 users
              { duration: '5m', target: 50 },    // Stay at 50 users
              { duration: '5m', target: 100 },   // Ramp to 100 users
              { duration: '2m', target: 0 },     // Ramp-down to 0 users
            ],
            thresholds: {
              http_req_duration: ['p(95)<500', 'p(99)<1000'],  // 95% < 500ms, 99% < 1000ms
              http_req_failed: ['rate<0.01'],                   // Error rate < 1%
              error_rate: ['rate<0.01'],                        // Custom error rate < 1%
              response_time: ['p(95)<500'],                     // Custom response time metric
            },
          };
          
          export default function() {
            // Test health endpoint
            let healthResponse = http.get(`${__ENV.TARGET_URL}/health`);
            
            let healthCheck = check(healthResponse, {
              'health status is 200': (r) => r.status === 200,
              'health response time < 200ms': (r) => r.timings.duration < 200,
            });
            
            errorRate.add(!healthCheck);
            responseTime.add(healthResponse.timings.duration);
            requestCount.add(1);
            
            // Test API endpoints if they exist
            let endpoints = ['/api/health', '/metrics'];
            
            for (let endpoint of endpoints) {
              let response = http.get(`${__ENV.TARGET_URL}${endpoint}`);
              
              let apiCheck = check(response, {
                [`${endpoint} status is 200 or 404`]: (r) => r.status === 200 || r.status === 404,
                [`${endpoint} response time < 500ms`]: (r) => r.timings.duration < 500,
              });
              
              errorRate.add(!apiCheck);
              responseTime.add(response.timings.duration);
              requestCount.add(1);
            }
            
            sleep(1);
          }
          EOF
          fi
          
          echo "✅ k6 test configuration prepared"
          
      - name: ⚡ Execute k6 performance analysis
        id: k6-test
        env:
          TARGET_URL: ${{ needs.app-startup.outputs.app-url }}
        run: |
          echo "## ⚡ k6 Performance Analysis Execution" >> $GITHUB_STEP_SUMMARY
          echo "Executing detailed performance metrics collection and statistical analysis" >> $GITHUB_STEP_SUMMARY
          
          echo "### k6 Test Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **Target URL**: $TARGET_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Script**: tests/performance/k6_test.js" >> $GITHUB_STEP_SUMMARY
          echo "- **Thresholds**: P95 < 500ms, P99 < 1000ms, Error rate < 1%" >> $GITHUB_STEP_SUMMARY
          
          # Execute k6 test with detailed output
          echo "🚀 Starting k6 performance analysis..."
          k6 run \
            --env TARGET_URL="$TARGET_URL" \
            --out json="${{ env.PERFORMANCE_REPORTS_PATH }}/k6/results.json" \
            --summary-export="${{ env.PERFORMANCE_REPORTS_PATH }}/k6/summary.json" \
            --console-output="${{ env.PERFORMANCE_REPORTS_PATH }}/k6/console.log" \
            tests/performance/k6_test.js || {
            
            K6_EXIT_CODE=$?
            echo "⚠️ **k6 TEST COMPLETED WITH WARNINGS**: Exit code $K6_EXIT_CODE" >> $GITHUB_STEP_SUMMARY
            
            # k6 exit codes: 0 = success, 97 = threshold failures, 98 = setup/teardown failures
            if [[ $K6_EXIT_CODE -eq 97 ]]; then
              echo "**Performance thresholds exceeded** - continuing with analysis" >> $GITHUB_STEP_SUMMARY
            elif [[ $K6_EXIT_CODE -eq 98 ]]; then
              echo "❌ **k6 SETUP FAILURE**: Test setup or teardown failed" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          }
          
          echo "✅ **SUCCESS**: k6 performance analysis completed" >> $GITHUB_STEP_SUMMARY
          
          # Parse and summarize k6 results
          if [[ -f "${{ env.PERFORMANCE_REPORTS_PATH }}/k6/summary.json" ]]; then
            echo "### k6 Performance Metrics:" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics from k6 summary
            python3 << 'EOF'
          import json
          
          try:
              with open('${{ env.PERFORMANCE_REPORTS_PATH }}/k6/summary.json', 'r') as f:
                  data = json.load(f)
              
              metrics = data.get('metrics', {})
              
              # Extract key performance indicators
              if 'http_req_duration' in metrics:
                  duration = metrics['http_req_duration']
                  print(f"- **Average Response Time**: {duration.get('avg', 0):.2f}ms")
                  print(f"- **95th Percentile**: {duration.get('p(95)', 0):.2f}ms")
                  print(f"- **99th Percentile**: {duration.get('p(99)', 0):.2f}ms")
              
              if 'http_req_failed' in metrics:
                  failed = metrics['http_req_failed']
                  error_rate = failed.get('rate', 0) * 100
                  print(f"- **Error Rate**: {error_rate:.2f}%")
              
              if 'http_reqs' in metrics:
                  reqs = metrics['http_reqs']
                  print(f"- **Total Requests**: {reqs.get('count', 0):,}")
                  print(f"- **Requests per Second**: {reqs.get('rate', 0):.2f}")
              
              if 'vus' in metrics:
                  vus = metrics['vus']
                  print(f"- **Peak Virtual Users**: {vus.get('max', 0)}")
              
              # Save metrics summary
              summary = {
                  'avg_response_time': metrics.get('http_req_duration', {}).get('avg', 0),
                  'p95_response_time': metrics.get('http_req_duration', {}).get('p(95)', 0),
                  'p99_response_time': metrics.get('http_req_duration', {}).get('p(99)', 0),
                  'error_rate': metrics.get('http_req_failed', {}).get('rate', 0) * 100,
                  'total_requests': metrics.get('http_reqs', {}).get('count', 0),
                  'requests_per_second': metrics.get('http_reqs', {}).get('rate', 0),
                  'peak_users': metrics.get('vus', {}).get('max', 0)
              }
              
              with open('k6_summary.json', 'w') as f:
                  json.dump(summary, f, indent=2)
              
          except Exception as e:
              print(f"Error parsing k6 results: {e}")
          EOF
          fi >> $GITHUB_STEP_SUMMARY
          
          # Set outputs
          echo "results-path=${{ env.PERFORMANCE_REPORTS_PATH }}/k6" >> $GITHUB_OUTPUT
          if [[ -f "k6_summary.json" ]]; then
            echo "metrics-summary=$(cat k6_summary.json)" >> $GITHUB_OUTPUT
          fi

  # ==========================================================================
  # BASELINE COMPARISON AND VARIANCE ANALYSIS JOB
  # ==========================================================================
  # Automated comparison with Node.js baseline ensuring ≤10% variance requirement
  
  baseline-comparison:
    name: 📊 Baseline Comparison
    runs-on: ubuntu-latest
    needs: [performance-setup, baseline-preparation, locust-load-testing, k6-performance-analysis]
    if: needs.performance-setup.outputs.baseline-enabled == 'true'
    timeout-minutes: 15
    
    outputs:
      variance-within-threshold: ${{ steps.comparison.outputs.within-threshold }}
      variance-percentage: ${{ steps.comparison.outputs.variance-percentage }}
      comparison-report-path: ${{ steps.comparison.outputs.report-path }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install analysis dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scipy matplotlib seaborn
          pip install pydantic jinja2 requests
          
      - name: 📊 Execute baseline comparison analysis
        id: comparison
        run: |
          echo "## 📊 Node.js Baseline Comparison Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Validating ≤${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}% variance requirement per Section 0.1.1" >> $GITHUB_STEP_SUMMARY
          
          # Create comparison reports directory
          mkdir -p ${{ env.PERFORMANCE_REPORTS_PATH }}/comparison
          
          # Create baseline comparison script if it doesn't exist
          if [[ ! -f "tests/performance/baseline_validator.py" ]]; then
            echo "Creating baseline comparison script..."
            cat > tests/performance/baseline_validator.py << 'EOF'
          #!/usr/bin/env python3
          import json
          import argparse
          import sys
          from pathlib import Path
          
          def load_baseline_data(baseline_path):
              """Load Node.js baseline performance data"""
              try:
                  with open(baseline_path, 'r') as f:
                      return json.load(f)
              except FileNotFoundError:
                  print(f"Baseline file not found: {baseline_path}")
                  # Return default baseline data
                  return {
                      "response_time_avg": 250.0,
                      "response_time_p95": 400.0,
                      "response_time_p99": 800.0,
                      "throughput_rps": 120.0,
                      "error_rate": 0.5,
                      "memory_usage_mb": 150.0,
                      "cpu_usage_percent": 25.0
                  }
          
          def load_current_results(locust_path, k6_path):
              """Load current test results from Locust and k6"""
              current_data = {}
              
              # Load Locust results
              locust_summary_path = Path("locust_summary.json")
              if locust_summary_path.exists():
                  with open(locust_summary_path, 'r') as f:
                      locust_data = json.load(f)
                      current_data.update({
                          "response_time_avg": locust_data.get("avg_response_time", 0),
                          "response_time_p95": locust_data.get("p95_response_time", 0),
                          "response_time_p99": locust_data.get("p99_response_time", 0),
                          "throughput_rps": locust_data.get("requests_per_second", 0),
                          "error_rate": locust_data.get("error_rate", 0)
                      })
              
              # Load k6 results
              k6_summary_path = Path("k6_summary.json")
              if k6_summary_path.exists():
                  with open(k6_summary_path, 'r') as f:
                      k6_data = json.load(f)
                      # Use k6 data as primary source for response times
                      current_data.update({
                          "response_time_avg": k6_data.get("avg_response_time", current_data.get("response_time_avg", 0)),
                          "response_time_p95": k6_data.get("p95_response_time", current_data.get("response_time_p95", 0)),
                          "response_time_p99": k6_data.get("p99_response_time", current_data.get("response_time_p99", 0)),
                          "error_rate": k6_data.get("error_rate", current_data.get("error_rate", 0))
                      })
              
              return current_data
          
          def calculate_variance(baseline_value, current_value):
              """Calculate percentage variance from baseline"""
              if baseline_value == 0:
                  return 0 if current_value == 0 else 100
              return ((current_value - baseline_value) / baseline_value) * 100
          
          def analyze_performance(baseline_data, current_data, threshold):
              """Analyze performance variance against baseline"""
              analysis = {
                  "variance_analysis": {},
                  "threshold_violations": [],
                  "overall_variance": 0,
                  "within_threshold": True
              }
              
              key_metrics = [
                  "response_time_avg",
                  "response_time_p95", 
                  "response_time_p99",
                  "throughput_rps",
                  "error_rate"
              ]
              
              total_variance = 0
              violations = []
              
              for metric in key_metrics:
                  baseline_val = baseline_data.get(metric, 0)
                  current_val = current_data.get(metric, 0)
                  variance = calculate_variance(baseline_val, current_val)
                  
                  analysis["variance_analysis"][metric] = {
                      "baseline": baseline_val,
                      "current": current_val,
                      "variance_percent": variance,
                      "acceptable": abs(variance) <= threshold
                  }
                  
                  if abs(variance) > threshold:
                      violations.append({
                          "metric": metric,
                          "variance": variance,
                          "threshold": threshold
                      })
                      analysis["within_threshold"] = False
                  
                  total_variance += abs(variance)
              
              analysis["overall_variance"] = total_variance / len(key_metrics)
              analysis["threshold_violations"] = violations
              
              return analysis
          
          def main():
              parser = argparse.ArgumentParser(description='Baseline Performance Comparison')
              parser.add_argument('--baseline-path', default='tests/performance/baseline_data.json')
              parser.add_argument('--locust-path', default='')
              parser.add_argument('--k6-path', default='')
              parser.add_argument('--threshold', type=float, default=10.0)
              parser.add_argument('--output-summary', default='baseline_comparison.json')
              parser.add_argument('--validate-thresholds', action='store_true')
              
              args = parser.parse_args()
              
              # Load data
              baseline_data = load_baseline_data(args.baseline_path)
              current_data = load_current_results(args.locust_path, args.k6_path)
              
              # Analyze performance
              analysis = analyze_performance(baseline_data, current_data, args.threshold)
              
              # Save results
              with open(args.output_summary, 'w') as f:
                  json.dump(analysis, f, indent=2)
              
              # Print summary
              print(f"Overall Variance: {analysis['overall_variance']:.2f}%")
              print(f"Within Threshold: {analysis['within_threshold']}")
              print(f"Violations: {len(analysis['threshold_violations'])}")
              
              # Exit with appropriate code
              if not analysis['within_threshold']:
                  print("PERFORMANCE VARIANCE EXCEEDED THRESHOLD")
                  sys.exit(1)
              else:
                  print("PERFORMANCE WITHIN ACCEPTABLE VARIANCE")
                  sys.exit(0)
          
          if __name__ == "__main__":
              main()
          EOF
            chmod +x tests/performance/baseline_validator.py
          fi
          
          # Execute baseline comparison
          echo "🔍 Analyzing performance variance..."
          python tests/performance/baseline_validator.py \
            --baseline-path "${{ needs.baseline-preparation.outputs.baseline-data-path }}" \
            --threshold "${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}" \
            --output-summary "${{ env.PERFORMANCE_REPORTS_PATH }}/comparison/baseline_comparison.json" || {
            
            COMPARISON_EXIT_CODE=$?
            echo "❌ **PERFORMANCE VARIANCE EXCEEDED**: Performance degradation detected" >> $GITHUB_STEP_SUMMARY
            echo "within-threshold=false" >> $GITHUB_OUTPUT
            
            # Continue to generate detailed report even if threshold exceeded
          }
          
          # Parse comparison results
          if [[ -f "${{ env.PERFORMANCE_REPORTS_PATH }}/comparison/baseline_comparison.json" ]]; then
            echo "### Baseline Comparison Results:" >> $GITHUB_STEP_SUMMARY
            
            # Extract key results using Python
            python3 << 'EOF'
          import json
          
          try:
              with open('${{ env.PERFORMANCE_REPORTS_PATH }}/comparison/baseline_comparison.json', 'r') as f:
                  analysis = json.load(f)
              
              overall_variance = analysis.get('overall_variance', 0)
              within_threshold = analysis.get('within_threshold', False)
              violations = analysis.get('threshold_violations', [])
              
              print(f"- **Overall Variance**: {overall_variance:.2f}%")
              print(f"- **Threshold**: ≤${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}%")
              print(f"- **Status**: {'✅ PASSED' if within_threshold else '❌ FAILED'}")
              print(f"- **Violations**: {len(violations)}")
              
              if violations:
                  print("")
                  print("**Threshold Violations:**")
                  for violation in violations:
                      metric = violation['metric']
                      variance = violation['variance']
                      print(f"- `{metric}`: {variance:.2f}% (exceeds ±${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}%)")
              
              # Print detailed variance analysis
              variance_analysis = analysis.get('variance_analysis', {})
              if variance_analysis:
                  print("")
                  print("**Detailed Variance Analysis:**")
                  print("| Metric | Baseline | Current | Variance | Status |")
                  print("|--------|----------|---------|----------|--------|")
                  
                  for metric, data in variance_analysis.items():
                      baseline = data.get('baseline', 0)
                      current = data.get('current', 0)
                      variance = data.get('variance_percent', 0)
                      acceptable = data.get('acceptable', False)
                      status = '✅' if acceptable else '❌'
                      
                      print(f"| {metric} | {baseline:.2f} | {current:.2f} | {variance:.2f}% | {status} |")
              
              # Set GitHub outputs
              print(f"\n::set-output name=within-threshold::{str(within_threshold).lower()}")
              print(f"::set-output name=variance-percentage::{overall_variance:.2f}")
              
          except Exception as e:
              print(f"Error analyzing comparison results: {e}")
              print("::set-output name=within-threshold::false")
              print("::set-output name=variance-percentage::100")
          EOF
          fi >> $GITHUB_STEP_SUMMARY
          
          # Set outputs
          echo "report-path=${{ env.PERFORMANCE_REPORTS_PATH }}/comparison" >> $GITHUB_OUTPUT
          
          # Fail job if variance exceeded and we're in strict mode
          if [[ "${{ env.PERFORMANCE_GATE_ENFORCEMENT }}" == "true" ]] && [[ -f "${{ env.PERFORMANCE_REPORTS_PATH }}/comparison/baseline_comparison.json" ]]; then
            WITHIN_THRESHOLD=$(python3 -c "
          import json
          with open('${{ env.PERFORMANCE_REPORTS_PATH }}/comparison/baseline_comparison.json', 'r') as f:
              data = json.load(f)
          print(str(data.get('within_threshold', False)).lower())
          ")
            
            if [[ "$WITHIN_THRESHOLD" == "false" ]]; then
              echo "🚫 **DEPLOYMENT BLOCKED**: Performance variance exceeds acceptable threshold" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi

  # ==========================================================================
  # PERFORMANCE MONITORING INTEGRATION JOB
  # ==========================================================================
  # Prometheus metrics collection and monitoring system integration
  
  performance-monitoring:
    name: 📈 Performance Monitoring
    runs-on: ubuntu-latest
    needs: [performance-setup, app-startup, locust-load-testing, k6-performance-analysis]
    timeout-minutes: 20
    
    outputs:
      monitoring-data-path: ${{ steps.monitoring.outputs.data-path }}
      prometheus-metrics: ${{ steps.monitoring.outputs.prometheus-metrics }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install monitoring dependencies
        run: |
          python -m pip install --upgrade pip
          pip install prometheus-client==0.17.1 requests psutil
          pip install grafana-api influxdb-client
          
      - name: 📈 Collect Prometheus metrics during testing
        id: monitoring
        env:
          APP_URL: ${{ needs.app-startup.outputs.app-url }}
        run: |
          echo "## 📈 Performance Monitoring Integration" >> $GITHUB_STEP_SUMMARY
          echo "Collecting Prometheus metrics and monitoring data per Section 3.6.2" >> $GITHUB_STEP_SUMMARY
          
          # Create monitoring reports directory
          mkdir -p ${{ env.PERFORMANCE_REPORTS_PATH }}/monitoring
          
          # Collect Prometheus metrics from application
          echo "🔍 Collecting Prometheus metrics..."
          
          METRICS_ENDPOINT="$APP_URL/metrics"
          METRICS_FILE="${{ env.PERFORMANCE_REPORTS_PATH }}/monitoring/prometheus_metrics.txt"
          
          # Fetch Prometheus metrics
          if curl -f -s "$METRICS_ENDPOINT" > "$METRICS_FILE"; then
            echo "✅ **SUCCESS**: Prometheus metrics collected" >> $GITHUB_STEP_SUMMARY
            echo "- **Metrics Endpoint**: $METRICS_ENDPOINT" >> $GITHUB_STEP_SUMMARY
            echo "- **Metrics File**: $METRICS_FILE" >> $GITHUB_STEP_SUMMARY
            
            # Parse key metrics
            echo "### Key Performance Metrics:" >> $GITHUB_STEP_SUMMARY
            
            # Extract Flask-specific metrics
            if grep -q "flask_" "$METRICS_FILE"; then
              echo "#### Flask Application Metrics:" >> $GITHUB_STEP_SUMMARY
              grep "flask_" "$METRICS_FILE" | head -10 >> $GITHUB_STEP_SUMMARY
            fi
            
            # Extract HTTP metrics
            if grep -q "http_" "$METRICS_FILE"; then
              echo "#### HTTP Request Metrics:" >> $GITHUB_STEP_SUMMARY
              grep "http_" "$METRICS_FILE" | head -10 >> $GITHUB_STEP_SUMMARY
            fi
            
            # Extract system metrics
            if grep -q "process_" "$METRICS_FILE"; then
              echo "#### System Resource Metrics:" >> $GITHUB_STEP_SUMMARY
              grep "process_" "$METRICS_FILE" | head -10 >> $GITHUB_STEP_SUMMARY
            fi
            
          else
            echo "⚠️ **WARNING**: Prometheus metrics endpoint not available" >> $GITHUB_STEP_SUMMARY
            echo "Application may not have Prometheus metrics enabled" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Create monitoring summary
          python3 << 'EOF'
          import json
          import os
          import psutil
          from datetime import datetime
          
          # Collect system metrics
          monitoring_data = {
              "timestamp": datetime.utcnow().isoformat(),
              "system_metrics": {
                  "cpu_usage_percent": psutil.cpu_percent(interval=1),
                  "memory_usage_mb": psutil.virtual_memory().used / 1024 / 1024,
                  "memory_percent": psutil.virtual_memory().percent,
                  "disk_usage_percent": psutil.disk_usage('/').percent,
                  "load_average": os.getloadavg() if hasattr(os, 'getloadavg') else [0, 0, 0]
              },
              "test_environment": {
                  "python_version": "${{ env.PYTHON_DEFAULT_VERSION }}",
                  "test_duration": "${{ needs.performance-setup.outputs.duration }}",
                  "max_users": "${{ needs.performance-setup.outputs.max-users }}",
                  "app_url": "${{ needs.app-startup.outputs.app-url }}"
              }
          }
          
          # Save monitoring data
          with open('${{ env.PERFORMANCE_REPORTS_PATH }}/monitoring/monitoring_summary.json', 'w') as f:
              json.dump(monitoring_data, f, indent=2)
          
          print(f"System CPU Usage: {monitoring_data['system_metrics']['cpu_usage_percent']:.1f}%")
          print(f"System Memory Usage: {monitoring_data['system_metrics']['memory_usage_mb']:.1f}MB ({monitoring_data['system_metrics']['memory_percent']:.1f}%)")
          print(f"System Load Average: {monitoring_data['system_metrics']['load_average'][0]:.2f}")
          EOF
          
          # Set outputs
          echo "data-path=${{ env.PERFORMANCE_REPORTS_PATH }}/monitoring" >> $GITHUB_OUTPUT
          if [[ -f "$METRICS_FILE" ]]; then
            echo "prometheus-metrics=available" >> $GITHUB_OUTPUT
          else
            echo "prometheus-metrics=unavailable" >> $GITHUB_OUTPUT
          fi

  # ==========================================================================
  # PERFORMANCE REGRESSION DETECTION JOB
  # ==========================================================================
  # Trend analysis and automated performance regression detection
  
  regression-detection:
    name: 📉 Regression Detection
    runs-on: ubuntu-latest
    needs: [performance-setup, baseline-comparison, performance-monitoring]
    if: always() && (needs.baseline-comparison.result == 'success' || needs.baseline-comparison.result == 'failure')
    timeout-minutes: 15
    
    outputs:
      regression-detected: ${{ steps.regression.outputs.detected }}
      trend-analysis: ${{ steps.regression.outputs.trend-analysis }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install regression analysis dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scipy scikit-learn matplotlib seaborn
          pip install statsmodels datetime
          
      - name: 📉 Execute performance regression analysis
        id: regression
        run: |
          echo "## 📉 Performance Regression Detection" >> $GITHUB_STEP_SUMMARY
          echo "Analyzing performance trends and detecting regressions per Section 6.6.2" >> $GITHUB_STEP_SUMMARY
          
          # Create regression analysis directory
          mkdir -p ${{ env.PERFORMANCE_REPORTS_PATH }}/regression
          
          # Create regression detection script
          cat > regression_detector.py << 'EOF'
          #!/usr/bin/env python3
          import json
          import sys
          from datetime import datetime, timedelta
          import numpy as np
          
          def load_historical_data():
              """Load historical performance data (simulated for now)"""
              # In a real implementation, this would load from a database or storage
              return {
                  "response_times": [200, 210, 195, 205, 220, 215, 200],  # Last 7 measurements
                  "throughput": [110, 108, 115, 112, 105, 107, 110],
                  "error_rates": [0.2, 0.3, 0.1, 0.2, 0.4, 0.3, 0.2],
                  "timestamps": [(datetime.now() - timedelta(days=i)).isoformat() for i in range(7, 0, -1)]
              }
          
          def load_current_results():
              """Load current test results"""
              current_data = {"response_time": 0, "throughput": 0, "error_rate": 0}
              
              # Load from comparison results if available
              try:
                  with open('${{ needs.baseline-comparison.outputs.comparison-report-path }}/baseline_comparison.json', 'r') as f:
                      comparison = json.load(f)
                      
                  variance_analysis = comparison.get('variance_analysis', {})
                  if 'response_time_avg' in variance_analysis:
                      current_data['response_time'] = variance_analysis['response_time_avg']['current']
                  if 'throughput_rps' in variance_analysis:
                      current_data['throughput'] = variance_analysis['throughput_rps']['current']
                  if 'error_rate' in variance_analysis:
                      current_data['error_rate'] = variance_analysis['error_rate']['current']
                      
              except (FileNotFoundError, json.JSONDecodeError, KeyError):
                  # Use default values if comparison data not available
                  current_data = {"response_time": 250, "throughput": 100, "error_rate": 0.5}
                  
              return current_data
          
          def detect_regression(historical_data, current_data, sensitivity=2.0):
              """Detect performance regression using statistical analysis"""
              regression_results = {
                  "regression_detected": False,
                  "anomalies": [],
                  "trends": {},
                  "recommendations": []
              }
              
              # Analyze response time trend
              response_times = historical_data['response_times'] + [current_data['response_time']]
              rt_mean = np.mean(response_times[:-1])
              rt_std = np.std(response_times[:-1])
              
              if current_data['response_time'] > rt_mean + (sensitivity * rt_std):
                  regression_results['regression_detected'] = True
                  regression_results['anomalies'].append({
                      'metric': 'response_time',
                      'current': current_data['response_time'],
                      'expected_range': f"{rt_mean - rt_std:.1f} - {rt_mean + rt_std:.1f}",
                      'severity': 'high' if current_data['response_time'] > rt_mean + (3 * rt_std) else 'medium'
                  })
              
              # Analyze throughput trend
              throughputs = historical_data['throughput'] + [current_data['throughput']]
              tp_mean = np.mean(throughputs[:-1])
              tp_std = np.std(throughputs[:-1])
              
              if current_data['throughput'] < tp_mean - (sensitivity * tp_std):
                  regression_results['regression_detected'] = True
                  regression_results['anomalies'].append({
                      'metric': 'throughput',
                      'current': current_data['throughput'],
                      'expected_range': f"{tp_mean - tp_std:.1f} - {tp_mean + tp_std:.1f}",
                      'severity': 'high' if current_data['throughput'] < tp_mean - (3 * tp_std) else 'medium'
                  })
              
              # Analyze error rate trend
              error_rates = historical_data['error_rates'] + [current_data['error_rate']]
              er_mean = np.mean(error_rates[:-1])
              er_std = np.std(error_rates[:-1])
              
              if current_data['error_rate'] > er_mean + (sensitivity * er_std):
                  regression_results['regression_detected'] = True
                  regression_results['anomalies'].append({
                      'metric': 'error_rate',
                      'current': current_data['error_rate'],
                      'expected_range': f"{er_mean - er_std:.2f} - {er_mean + er_std:.2f}",
                      'severity': 'critical' if current_data['error_rate'] > er_mean + (3 * er_std) else 'high'
                  })
              
              # Generate trend analysis
              regression_results['trends'] = {
                  'response_time_trend': 'increasing' if len(response_times) > 1 and response_times[-1] > response_times[-2] else 'stable',
                  'throughput_trend': 'decreasing' if len(throughputs) > 1 and throughputs[-1] < throughputs[-2] else 'stable',
                  'error_rate_trend': 'increasing' if len(error_rates) > 1 and error_rates[-1] > error_rates[-2] else 'stable'
              }
              
              # Generate recommendations
              if regression_results['regression_detected']:
                  regression_results['recommendations'] = [
                      "Review recent code changes for performance impact",
                      "Check database query performance and indexing", 
                      "Analyze memory usage and garbage collection patterns",
                      "Verify external service dependencies and response times",
                      "Consider scaling resources if sustained load increased"
                  ]
              
              return regression_results
          
          def main():
              historical_data = load_historical_data()
              current_data = load_current_results()
              
              regression_analysis = detect_regression(historical_data, current_data)
              
              # Save results
              with open('${{ env.PERFORMANCE_REPORTS_PATH }}/regression/regression_analysis.json', 'w') as f:
                  json.dump(regression_analysis, f, indent=2)
              
              # Print results
              print(f"Regression Detected: {regression_analysis['regression_detected']}")
              print(f"Anomalies: {len(regression_analysis['anomalies'])}")
              
              for anomaly in regression_analysis['anomalies']:
                  print(f"- {anomaly['metric']}: {anomaly['current']} (expected: {anomaly['expected_range']}) - {anomaly['severity']}")
              
              return regression_analysis['regression_detected']
          
          if __name__ == "__main__":
              regression_detected = main()
              sys.exit(1 if regression_detected else 0)
          EOF
          
          # Execute regression detection
          echo "🔍 Analyzing performance trends and detecting regressions..."
          python regression_detector.py || {
            echo "⚠️ **PERFORMANCE REGRESSION DETECTED**" >> $GITHUB_STEP_SUMMARY
            echo "detected=true" >> $GITHUB_OUTPUT
          }
          
          # Parse regression results
          if [[ -f "${{ env.PERFORMANCE_REPORTS_PATH }}/regression/regression_analysis.json" ]]; then
            echo "### Regression Analysis Results:" >> $GITHUB_STEP_SUMMARY
            
            python3 << 'EOF'
          import json
          
          try:
              with open('${{ env.PERFORMANCE_REPORTS_PATH }}/regression/regression_analysis.json', 'r') as f:
                  analysis = json.load(f)
              
              regression_detected = analysis.get('regression_detected', False)
              anomalies = analysis.get('anomalies', [])
              trends = analysis.get('trends', {})
              recommendations = analysis.get('recommendations', [])
              
              print(f"- **Regression Status**: {'🚨 DETECTED' if regression_detected else '✅ NONE'}")
              print(f"- **Anomalies Found**: {len(anomalies)}")
              
              if anomalies:
                  print("")
                  print("**Performance Anomalies:**")
                  for anomaly in anomalies:
                      severity_emoji = {'critical': '🔴', 'high': '🟠', 'medium': '🟡'}.get(anomaly['severity'], '⚪')
                      print(f"- {severity_emoji} `{anomaly['metric']}`: {anomaly['current']} (expected: {anomaly['expected_range']})")
              
              if trends:
                  print("")
                  print("**Performance Trends:**")
                  for metric, trend in trends.items():
                      trend_emoji = {'increasing': '📈', 'decreasing': '📉', 'stable': '➡️'}.get(trend, '❓')
                      print(f"- {trend_emoji} {metric.replace('_', ' ').title()}: {trend}")
              
              if recommendations:
                  print("")
                  print("**Optimization Recommendations:**")
                  for i, rec in enumerate(recommendations, 1):
                      print(f"{i}. {rec}")
              
              print(f"\n::set-output name=detected::{str(regression_detected).lower()}")
              
          except Exception as e:
              print(f"Error parsing regression analysis: {e}")
              print("::set-output name=detected::false")
          EOF
          fi >> $GITHUB_STEP_SUMMARY
          
          # Set trend analysis output
          if [[ -f "${{ env.PERFORMANCE_REPORTS_PATH }}/regression/regression_analysis.json" ]]; then
            echo "trend-analysis=$(cat ${{ env.PERFORMANCE_REPORTS_PATH }}/regression/regression_analysis.json)" >> $GITHUB_OUTPUT
          fi

  # ==========================================================================
  # PERFORMANCE REPORTING JOB
  # ==========================================================================
  # Comprehensive performance report generation with variance calculation
  
  performance-reporting:
    name: 📋 Performance Reporting
    runs-on: ubuntu-latest
    needs: [performance-setup, app-startup, locust-load-testing, k6-performance-analysis, baseline-comparison, performance-monitoring, regression-detection]
    if: always() && !cancelled()
    timeout-minutes: 20
    
    outputs:
      report-url: ${{ steps.report.outputs.url }}
      report-summary: ${{ steps.report.outputs.summary }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install reporting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 matplotlib seaborn pandas
          pip install markdown weasyprint
          
      - name: 📋 Generate comprehensive performance report
        id: report
        run: |
          echo "## 📋 Performance Report Generation" >> $GITHUB_STEP_SUMMARY
          echo "Creating comprehensive performance validation report with variance analysis" >> $GITHUB_STEP_SUMMARY
          
          # Create final reports directory
          mkdir -p ${{ env.PERFORMANCE_REPORTS_PATH }}/final
          
          # Create performance report generator
          cat > report_generator.py << 'EOF'
          #!/usr/bin/env python3
          import json
          import os
          from datetime import datetime
          from pathlib import Path
          import subprocess
          
          def collect_all_results():
              """Collect all performance test results"""
              results = {
                  "metadata": {
                      "timestamp": datetime.utcnow().isoformat(),
                      "test_environment": "${{ needs.performance-setup.outputs.test-environment }}",
                      "max_users": "${{ needs.performance-setup.outputs.max-users }}",
                      "test_duration": "${{ needs.performance-setup.outputs.duration }}",
                      "variance_threshold": "${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}%",
                      "baseline_enabled": "${{ needs.performance-setup.outputs.baseline-enabled }}",
                      "app_url": "${{ needs.app-startup.outputs.app-url }}"
                  },
                  "test_results": {},
                  "analysis": {},
                  "summary": {}
              }
              
              # Load Locust results
              locust_summary_path = Path("locust_summary.json")
              if locust_summary_path.exists():
                  with open(locust_summary_path, 'r') as f:
                      results["test_results"]["locust"] = json.load(f)
              
              # Load k6 results
              k6_summary_path = Path("k6_summary.json")
              if k6_summary_path.exists():
                  with open(k6_summary_path, 'r') as f:
                      results["test_results"]["k6"] = json.load(f)
              
              # Load baseline comparison
              baseline_comparison_path = Path("${{ needs.baseline-comparison.outputs.comparison-report-path }}/baseline_comparison.json")
              if baseline_comparison_path.exists():
                  with open(baseline_comparison_path, 'r') as f:
                      results["analysis"]["baseline_comparison"] = json.load(f)
              
              # Load regression analysis
              regression_path = Path("${{ env.PERFORMANCE_REPORTS_PATH }}/regression/regression_analysis.json")
              if regression_path.exists():
                  with open(regression_path, 'r') as f:
                      results["analysis"]["regression"] = json.load(f)
              
              # Load monitoring data
              monitoring_path = Path("${{ needs.performance-monitoring.outputs.monitoring-data-path }}/monitoring_summary.json")
              if monitoring_path.exists():
                  with open(monitoring_path, 'r') as f:
                      results["analysis"]["monitoring"] = json.load(f)
              
              return results
          
          def generate_summary(results):
              """Generate executive summary"""
              summary = {
                  "overall_status": "UNKNOWN",
                  "key_metrics": {},
                  "recommendations": [],
                  "action_required": False
              }
              
              # Determine overall status
              baseline_analysis = results.get("analysis", {}).get("baseline_comparison", {})
              regression_analysis = results.get("analysis", {}).get("regression", {})
              
              within_threshold = baseline_analysis.get("within_threshold", True)
              regression_detected = regression_analysis.get("regression_detected", False)
              
              if within_threshold and not regression_detected:
                  summary["overall_status"] = "PASSED"
              elif not within_threshold:
                  summary["overall_status"] = "FAILED - VARIANCE EXCEEDED"
                  summary["action_required"] = True
              elif regression_detected:
                  summary["overall_status"] = "WARNING - REGRESSION DETECTED"
                  summary["action_required"] = True
              
              # Extract key metrics
              locust_data = results.get("test_results", {}).get("locust", {})
              k6_data = results.get("test_results", {}).get("k6", {})
              
              summary["key_metrics"] = {
                  "response_time_avg": k6_data.get("avg_response_time", locust_data.get("avg_response_time", 0)),
                  "response_time_p95": k6_data.get("p95_response_time", locust_data.get("p95_response_time", 0)),
                  "throughput_rps": k6_data.get("requests_per_second", locust_data.get("requests_per_second", 0)),
                  "error_rate": k6_data.get("error_rate", locust_data.get("error_rate", 0)),
                  "total_requests": k6_data.get("total_requests", locust_data.get("total_requests", 0)),
                  "variance_percentage": baseline_analysis.get("overall_variance", 0)
              }
              
              # Generate recommendations
              if summary["action_required"]:
                  if not within_threshold:
                      summary["recommendations"].extend([
                          "Performance optimization required before deployment",
                          "Review code changes that may impact performance",
                          "Consider infrastructure scaling or configuration tuning"
                      ])
                  if regression_detected:
                      regression_recommendations = regression_analysis.get("recommendations", [])
                      summary["recommendations"].extend(regression_recommendations)
              else:
                  summary["recommendations"] = [
                      "Performance is within acceptable limits",
                      "Continue monitoring performance trends",
                      "Consider baseline updates if consistently performing better"
                  ]
              
              return summary
          
          def create_html_report(results, summary):
              """Create HTML performance report"""
              html_template = '''
          <!DOCTYPE html>
          <html>
          <head>
              <title>Performance Test Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .header { background: #f4f4f4; padding: 20px; border-radius: 5px; }
                  .status-passed { color: #4caf50; font-weight: bold; }
                  .status-failed { color: #f44336; font-weight: bold; }
                  .status-warning { color: #ff9800; font-weight: bold; }
                  .metrics-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  .metrics-table th, .metrics-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                  .metrics-table th { background-color: #f2f2f2; }
                  .section { margin: 30px 0; }
                  .recommendation { background: #e3f2fd; padding: 10px; margin: 5px 0; border-radius: 3px; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>Flask Application Performance Test Report</h1>
                  <p><strong>Generated:</strong> ''' + results["metadata"]["timestamp"] + '''</p>
                  <p><strong>Environment:</strong> ''' + results["metadata"]["test_environment"] + '''</p>
                  <p><strong>Status:</strong> <span class="status-''' + summary["overall_status"].lower().replace(" ", "-") + '''">''' + summary["overall_status"] + '''</span></p>
              </div>
              
              <div class="section">
                  <h2>Executive Summary</h2>
                  <table class="metrics-table">
                      <tr><th>Metric</th><th>Value</th><th>Status</th></tr>
                      <tr><td>Average Response Time</td><td>''' + f"{summary['key_metrics']['response_time_avg']:.2f}ms" + '''</td><td>''' + ("✅" if summary['key_metrics']['response_time_avg'] < 500 else "❌") + '''</td></tr>
                      <tr><td>95th Percentile Response Time</td><td>''' + f"{summary['key_metrics']['response_time_p95']:.2f}ms" + '''</td><td>''' + ("✅" if summary['key_metrics']['response_time_p95'] < 500 else "❌") + '''</td></tr>
                      <tr><td>Throughput</td><td>''' + f"{summary['key_metrics']['throughput_rps']:.2f} RPS" + '''</td><td>''' + ("✅" if summary['key_metrics']['throughput_rps'] >= 100 else "❌") + '''</td></tr>
                      <tr><td>Error Rate</td><td>''' + f"{summary['key_metrics']['error_rate']:.2f}%" + '''</td><td>''' + ("✅" if summary['key_metrics']['error_rate'] < 1 else "❌") + '''</td></tr>
                      <tr><td>Performance Variance</td><td>''' + f"{summary['key_metrics']['variance_percentage']:.2f}%" + '''</td><td>''' + ("✅" if summary['key_metrics']['variance_percentage'] <= 10 else "❌") + '''</td></tr>
                  </table>
              </div>
              
              <div class="section">
                  <h2>Recommendations</h2>
                  ''' + ''.join([f'<div class="recommendation">{rec}</div>' for rec in summary["recommendations"]]) + '''
              </div>
              
              <div class="section">
                  <h2>Test Configuration</h2>
                  <ul>
                      <li><strong>Maximum Users:</strong> ''' + results["metadata"]["max_users"] + '''</li>
                      <li><strong>Test Duration:</strong> ''' + results["metadata"]["test_duration"] + '''s</li>
                      <li><strong>Variance Threshold:</strong> ''' + results["metadata"]["variance_threshold"] + '''</li>
                      <li><strong>Application URL:</strong> ''' + results["metadata"]["app_url"] + '''</li>
                  </ul>
              </div>
          </body>
          </html>
              '''
              
              return html_template
          
          def main():
              # Collect all results
              results = collect_all_results()
              
              # Generate summary
              summary = generate_summary(results)
              
              # Save complete results
              with open('${{ env.PERFORMANCE_REPORTS_PATH }}/final/complete_results.json', 'w') as f:
                  json.dump({"results": results, "summary": summary}, f, indent=2)
              
              # Create HTML report
              html_report = create_html_report(results, summary)
              with open('${{ env.PERFORMANCE_REPORTS_PATH }}/final/performance_report.html', 'w') as f:
                  f.write(html_report)
              
              # Create summary for GitHub Actions
              with open('report_summary.json', 'w') as f:
                  json.dump(summary, f, indent=2)
              
              print(f"Report Status: {summary['overall_status']}")
              print(f"Action Required: {summary['action_required']}")
              
              return summary
          
          if __name__ == "__main__":
              summary = main()
          EOF
          
          # Generate performance report
          echo "📝 Generating comprehensive performance report..."
          python report_generator.py
          
          # Display report summary
          if [[ -f "report_summary.json" ]]; then
            echo "### Performance Report Summary:" >> $GITHUB_STEP_SUMMARY
            
            python3 << 'EOF'
          import json
          
          try:
              with open('report_summary.json', 'r') as f:
                  summary = json.load(f)
              
              status = summary.get('overall_status', 'UNKNOWN')
              action_required = summary.get('action_required', False)
              key_metrics = summary.get('key_metrics', {})
              recommendations = summary.get('recommendations', [])
              
              # Status with emoji
              status_emoji = {
                  'PASSED': '✅',
                  'FAILED - VARIANCE EXCEEDED': '❌',
                  'WARNING - REGRESSION DETECTED': '⚠️'
              }.get(status, '❓')
              
              print(f"- **Overall Status**: {status_emoji} {status}")
              print(f"- **Action Required**: {'🚨 Yes' if action_required else '✅ No'}")
              print("")
              print("**Key Performance Metrics:**")
              print(f"- Average Response Time: {key_metrics.get('response_time_avg', 0):.2f}ms")
              print(f"- 95th Percentile: {key_metrics.get('response_time_p95', 0):.2f}ms")
              print(f"- Throughput: {key_metrics.get('throughput_rps', 0):.2f} RPS")
              print(f"- Error Rate: {key_metrics.get('error_rate', 0):.2f}%")
              print(f"- Performance Variance: {key_metrics.get('variance_percentage', 0):.2f}%")
              
              if recommendations:
                  print("")
                  print("**Recommendations:**")
                  for i, rec in enumerate(recommendations[:5], 1):  # Show top 5 recommendations
                      print(f"{i}. {rec}")
              
          except Exception as e:
              print(f"Error displaying report summary: {e}")
          EOF
          fi >> $GITHUB_STEP_SUMMARY
          
          # Set outputs
          echo "url=performance_report.html" >> $GITHUB_OUTPUT
          if [[ -f "report_summary.json" ]]; then
            echo "summary=$(cat report_summary.json)" >> $GITHUB_OUTPUT
          fi

  # ==========================================================================
  # PERFORMANCE GATE ENFORCEMENT JOB
  # ==========================================================================
  # Final performance validation and deployment gate enforcement
  
  performance-gate:
    name: 🚪 Performance Gate
    runs-on: ubuntu-latest
    needs: [performance-setup, baseline-comparison, regression-detection, performance-reporting]
    if: always() && !cancelled()
    timeout-minutes: 10
    
    outputs:
      gate-passed: ${{ steps.gate.outputs.passed }}
      deployment-approved: ${{ steps.gate.outputs.deployment-approved }}
      
    steps:
      - name: 🚪 Evaluate performance gate criteria
        id: gate
        run: |
          echo "## 🚪 Performance Gate Enforcement" >> $GITHUB_STEP_SUMMARY
          echo "Final validation of performance requirements and deployment approval per Section 8.5.2" >> $GITHUB_STEP_SUMMARY
          
          # Initialize gate status
          GATE_PASSED=true
          DEPLOYMENT_APPROVED=false
          
          # Evaluate baseline comparison results
          BASELINE_WITHIN_THRESHOLD="${{ needs.baseline-comparison.outputs.variance-within-threshold }}"
          VARIANCE_PERCENTAGE="${{ needs.baseline-comparison.outputs.variance-percentage }}"
          
          echo "### Performance Gate Evaluation:" >> $GITHUB_STEP_SUMMARY
          echo "| Criteria | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Check variance threshold
          if [[ "$BASELINE_WITHIN_THRESHOLD" == "true" ]]; then
            echo "| Variance Threshold | ✅ PASSED | ${VARIANCE_PERCENTAGE}% ≤ ${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Variance Threshold | ❌ FAILED | ${VARIANCE_PERCENTAGE}% > ${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}% |" >> $GITHUB_STEP_SUMMARY
            GATE_PASSED=false
          fi
          
          # Check regression detection
          REGRESSION_DETECTED="${{ needs.regression-detection.outputs.regression-detected }}"
          if [[ "$REGRESSION_DETECTED" == "true" ]]; then
            echo "| Regression Detection | ⚠️ WARNING | Performance regression detected |" >> $GITHUB_STEP_SUMMARY
            # Regression is warning, not blocking
          else
            echo "| Regression Detection | ✅ PASSED | No performance regression |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check test execution status
          LOCUST_SUCCESS="${{ needs.locust-load-testing.result }}"
          K6_SUCCESS="${{ needs.k6-performance-analysis.result }}"
          
          if [[ "$LOCUST_SUCCESS" == "success" ]]; then
            echo "| Locust Load Testing | ✅ PASSED | Load testing completed successfully |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Locust Load Testing | ❌ FAILED | Load testing failed or skipped |" >> $GITHUB_STEP_SUMMARY
            GATE_PASSED=false
          fi
          
          if [[ "$K6_SUCCESS" == "success" ]]; then
            echo "| k6 Performance Analysis | ✅ PASSED | Performance analysis completed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| k6 Performance Analysis | ❌ FAILED | Performance analysis failed |" >> $GITHUB_STEP_SUMMARY
            GATE_PASSED=false
          fi
          
          # Final gate decision
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "$GATE_PASSED" == "true" ]]; then
            echo "🎉 **PERFORMANCE GATE: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "All performance criteria met - deployment approved" >> $GITHUB_STEP_SUMMARY
            DEPLOYMENT_APPROVED=true
          else
            echo "🚫 **PERFORMANCE GATE: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Performance criteria not met - deployment blocked" >> $GITHUB_STEP_SUMMARY
            DEPLOYMENT_APPROVED=false
          fi
          
          # Conditional deployment approval based on environment
          ENVIRONMENT="${{ needs.performance-setup.outputs.test-environment }}"
          if [[ "$ENVIRONMENT" == "development" ]] && [[ "${{ env.PERFORMANCE_GATE_ENFORCEMENT }}" != "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **Note**: Development environment - performance gate enforcement relaxed" >> $GITHUB_STEP_SUMMARY
            DEPLOYMENT_APPROVED=true
          fi
          
          # Set outputs
          echo "passed=$GATE_PASSED" >> $GITHUB_OUTPUT
          echo "deployment-approved=$DEPLOYMENT_APPROVED" >> $GITHUB_OUTPUT
          
          # Exit with appropriate code
          if [[ "$GATE_PASSED" == "false" ]] && [[ "${{ env.PERFORMANCE_GATE_ENFORCEMENT }}" == "true" ]]; then
            echo "🚨 Performance gate enforcement enabled - failing pipeline" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # ==========================================================================
  # CLEANUP AND NOTIFICATION JOB
  # ==========================================================================
  # Performance testing cleanup and stakeholder notification
  
  cleanup-and-notification:
    name: 🧹 Cleanup & Notification
    runs-on: ubuntu-latest
    needs: [performance-setup, app-startup, performance-gate, performance-reporting]
    if: always()
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🧹 Cleanup test environment
        run: |
          echo "## 🧹 Performance Testing Cleanup" >> $GITHUB_STEP_SUMMARY
          
          # Stop Flask application if running
          if [[ -n "${{ needs.app-startup.outputs.app-url }}" ]]; then
            echo "🛑 Stopping Flask application..."
            
            # Find and kill Gunicorn processes
            if pgrep -f gunicorn > /dev/null; then
              pkill -f gunicorn || true
              echo "✅ Flask application stopped"
            fi
          fi
          
          # Cleanup temporary files
          echo "🗂️ Cleaning up temporary files..."
          rm -f locust_summary.json k6_summary.json report_summary.json
          rm -f regression_detector.py report_generator.py
          
          echo "✅ Cleanup completed successfully" >> $GITHUB_STEP_SUMMARY
          
      - name: 📊 Upload performance test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-reports-${{ github.run_number }}
          path: |
            ${{ env.PERFORMANCE_REPORTS_PATH }}/
            !${{ env.PERFORMANCE_REPORTS_PATH }}/**/*.log
          retention-days: ${{ env.METRICS_RETENTION_DAYS }}
          
      - name: 📈 Publish performance test results
        uses: dorny/test-reporter@v1
        if: always() && needs.locust-load-testing.result == 'success'
        with:
          name: Performance Test Results
          path: ${{ env.PERFORMANCE_REPORTS_PATH }}/**/results*.csv
          reporter: java-junit
          fail-on-error: false
          
      - name: 🚨 Send performance notifications
        if: always()
        run: |
          echo "📱 Sending performance test notifications..."
          
          # Determine notification message
          GATE_PASSED="${{ needs.performance-gate.outputs.gate-passed }}"
          DEPLOYMENT_APPROVED="${{ needs.performance-gate.outputs.deployment-approved }}"
          ENVIRONMENT="${{ needs.performance-setup.outputs.test-environment }}"
          
          if [[ "$GATE_PASSED" == "true" ]]; then
            NOTIFICATION_TITLE="✅ Performance Tests PASSED"
            NOTIFICATION_COLOR="good"
            NOTIFICATION_MESSAGE="All performance criteria met for ${{ github.repository }} in $ENVIRONMENT environment"
          else
            NOTIFICATION_TITLE="❌ Performance Tests FAILED"
            NOTIFICATION_COLOR="danger"
            NOTIFICATION_MESSAGE="Performance criteria not met for ${{ github.repository }} in $ENVIRONMENT environment"
          fi
          
          # Add performance summary
          VARIANCE_PERCENTAGE="${{ needs.baseline-comparison.outputs.variance-percentage }}"
          REGRESSION_DETECTED="${{ needs.regression-detection.outputs.regression-detected }}"
          
          NOTIFICATION_DETAILS="Variance: ${VARIANCE_PERCENTAGE}% (threshold: ≤${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}%)"
          if [[ "$REGRESSION_DETECTED" == "true" ]]; then
            NOTIFICATION_DETAILS="$NOTIFICATION_DETAILS | Regression: Detected"
          fi
          
          # Send Slack notification
          if [[ -n "${{ env.SLACK_WEBHOOK_URL }}" ]]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "'"$NOTIFICATION_TITLE"'",
                "attachments": [{
                  "color": "'"$NOTIFICATION_COLOR"'",
                  "fields": [
                    {"title": "Repository", "value": "${{ github.repository }}", "short": true},
                    {"title": "Environment", "value": "'"$ENVIRONMENT"'", "short": true},
                    {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                    {"title": "Triggered by", "value": "${{ github.actor }}", "short": true},
                    {"title": "Performance Details", "value": "'"$NOTIFICATION_DETAILS"'", "short": false}
                  ]
                }]
              }' \
              ${{ env.SLACK_WEBHOOK_URL }} || echo "Failed to send Slack notification"
          fi
          
          # Send performance alert if regression detected
          if [[ "$REGRESSION_DETECTED" == "true" ]] && [[ "${{ github.event.inputs.alert_on_regression }}" != "false" ]]; then
            echo "🚨 Sending performance regression alert..."
            
            if [[ -n "${{ env.PERFORMANCE_ALERT_CHANNELS }}" ]]; then
              curl -X POST -H 'Content-type: application/json' \
                --data '{
                  "text": "🚨 PERFORMANCE REGRESSION DETECTED",
                  "attachments": [{
                    "color": "warning",
                    "title": "Performance Regression Alert",
                    "text": "Performance regression detected in ${{ github.repository }} - immediate investigation recommended",
                    "fields": [
                      {"title": "Environment", "value": "'"$ENVIRONMENT"'", "short": true},
                      {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                      {"title": "Commit", "value": "${{ github.sha }}", "short": true}
                    ]
                  }]
                }' \
                ${{ env.PERFORMANCE_ALERT_CHANNELS }} || echo "Failed to send regression alert"
            fi
          fi
          
          echo "✅ Notifications sent successfully" >> $GITHUB_STEP_SUMMARY
          
      - name: 📋 Final performance summary
        run: |
          echo "## 📋 Performance Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "Complete performance validation pipeline execution results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.performance-setup.outputs.test-environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Duration**: ${{ needs.performance-setup.outputs.duration }}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Max Users**: ${{ needs.performance-setup.outputs.max-users }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Variance Threshold**: ≤${{ env.PERFORMANCE_VARIANCE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Gate**: ${{ needs.performance-gate.outputs.gate-passed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Approved**: ${{ needs.performance-gate.outputs.deployment-approved }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status Summary:" >> $GITHUB_STEP_SUMMARY
          echo "- **Locust Load Testing**: ${{ needs.locust-load-testing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **k6 Performance Analysis**: ${{ needs.k6-performance-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Baseline Comparison**: ${{ needs.baseline-comparison.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Regression Detection**: ${{ needs.regression-detection.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Monitoring**: ${{ needs.performance-monitoring.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Reporting**: ${{ needs.performance-reporting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏁 **Performance testing pipeline completed**" >> $GITHUB_STEP_SUMMARY