# Dependabot configuration for automated Python dependency security updates
# and vulnerability management for Flask migration project
#
# Implements comprehensive dependency security management per:
# - Section 8.5.1 Dependency Security Validation Pipeline
# - Section 8.3.5 Container Security Framework  
# - Section 6.6.2 CI/CD Integration
# - Section 8.5.1 Security Scanning requirements
#
# Ensures continuous security maintenance for pip packages, Docker base images,
# and GitHub Actions workflows with automated vulnerability detection and remediation.

version: 2

updates:
  # =============================================================================
  # PYTHON PIP DEPENDENCIES
  # =============================================================================
  # Monitors Python package dependencies in requirements.txt for security updates
  # Integrates with safety 3.0+ vulnerability scanning per Section 8.5.1
  
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      # Daily security updates for Python packages during business hours
      # Ensures rapid response to critical vulnerability disclosures
      interval: "daily"
      time: "09:00"
      timezone: "UTC"
    
    # Security-focused update configuration
    open-pull-requests-limit: 10
    
    # Target branches for security updates
    target-branch: "main"
    
    # Pull request configuration for security updates
    pull-request-branch-name:
      separator: "/"
    
    # Commit message configuration for clear security tracking
    commit-message:
      prefix: "security"
      prefix-development: "security"
      include: "scope"
    
    # Review assignment for security updates
    reviewers:
      - "security-team"
      - "python-maintainers"
    
    assignees:
      - "security-team"
    
    # Security-focused labeling for automated processing
    labels:
      - "security"
      - "dependencies"
      - "python"
      - "automated"
    
    # Allow both direct and indirect dependency updates for comprehensive security
    allow:
      - dependency-type: "direct"
      - dependency-type: "indirect"
    
    # Group patch and minor security updates to reduce PR volume
    groups:
      # Group security patches for rapid deployment
      security-patches:
        applies-to: security-updates
        patterns:
          - "*"
        update-types:
          - "patch"
      
      # Group minor version updates for weekly review
      minor-updates:
        patterns:
          - "*"
        update-types:
          - "minor"
    
    # Ignore major version updates to prevent breaking changes
    # Major updates require manual review and testing
    ignore:
      - dependency-name: "*"
        update-types: ["version-update:semver-major"]
    
    # Enable Dependabot security advisories integration
    insecure-external-code-execution: "allow"

  # =============================================================================
  # DOCKER BASE IMAGE UPDATES
  # =============================================================================
  # Monitors Docker base images for security patches per Section 8.3.5
  # Ensures python:3.11-slim base image receives critical security updates
  
  - package-ecosystem: "docker"
    directory: "/"
    schedule:
      # Weekly Docker image updates to balance security and stability
      # Base image updates are less frequent but critical for container security
      interval: "weekly"
      day: "tuesday"
      time: "10:00"
      timezone: "UTC"
    
    open-pull-requests-limit: 5
    target-branch: "main"
    
    # Docker-specific commit messages
    commit-message:
      prefix: "docker"
      prefix-development: "docker-security"
      include: "scope"
    
    # Container security team review
    reviewers:
      - "security-team"
      - "devops-team"
    
    assignees:
      - "devops-team"
    
    # Docker security labeling
    labels:
      - "security"
      - "docker"
      - "base-image"
      - "automated"
    
    # Monitor all Docker dependencies
    allow:
      - dependency-type: "direct"
      - dependency-type: "indirect"
    
    # Group Docker updates for coordinated deployment
    groups:
      docker-security:
        patterns:
          - "python"
          - "python:*"
        update-types:
          - "patch"
          - "minor"

  # =============================================================================
  # GITHUB ACTIONS WORKFLOWS
  # =============================================================================
  # Monitors GitHub Actions for security updates per Section 6.6.2 CI/CD Integration
  # Ensures workflow security and prevents supply chain vulnerabilities
  
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      # Weekly GitHub Actions updates for security and feature improvements
      # Actions updates are crucial for CI/CD pipeline security
      interval: "weekly"
      day: "wednesday"
      time: "11:00"
      timezone: "UTC"
    
    open-pull-requests-limit: 5
    target-branch: "main"
    
    # GitHub Actions commit messages
    commit-message:
      prefix: "actions"
      prefix-development: "actions-security"
      include: "scope"
    
    # CI/CD team review for workflow changes
    reviewers:
      - "devops-team"
      - "security-team"
    
    assignees:
      - "devops-team"
    
    # Actions security labeling
    labels:
      - "security"
      - "github-actions"
      - "ci-cd"
      - "automated"
    
    # Monitor all GitHub Actions dependencies
    allow:
      - dependency-type: "direct"
      - dependency-type: "indirect"
    
    # Group Actions updates by category
    groups:
      # Security-focused actions (scanning, vulnerability detection)
      security-actions:
        patterns:
          - "github/codeql-action"
          - "aquasecurity/trivy-action"
          - "securecodewarrior/github-action-add-sarif"
          - "actions/dependency-review-action"
        update-types:
          - "patch"
          - "minor"
      
      # Core CI/CD actions (checkout, setup, cache)
      core-actions:
        patterns:
          - "actions/checkout"
          - "actions/setup-python"
          - "actions/cache"
          - "actions/upload-artifact"
        update-types:
          - "patch"
          - "minor"

  # =============================================================================
  # ADDITIONAL SECURITY CONFIGURATIONS
  # =============================================================================
  # Enhanced security monitoring for development dependencies and tools
  
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      # Monthly updates for development dependencies
      # Less critical than production dependencies but important for developer security
      interval: "monthly"
      day: "first-tuesday"
      time: "14:00"
      timezone: "UTC"
    
    open-pull-requests-limit: 3
    target-branch: "develop"
    
    commit-message:
      prefix: "dev-deps"
      include: "scope"
    
    reviewers:
      - "python-maintainers"
    
    assignees:
      - "python-maintainers"
    
    labels:
      - "dependencies"
      - "development"
      - "automated"
    
    # Focus on development and testing dependencies
    allow:
      - dependency-type: "development"
    
    # Development tools grouping
    groups:
      dev-tools:
        patterns:
          - "pytest*"
          - "black"
          - "flake8"
          - "mypy"
          - "bandit"
          - "safety"
          - "pip-tools"
        update-types:
          - "patch"
          - "minor"

# =============================================================================
# DEPENDABOT SECURITY INTEGRATION NOTES
# =============================================================================
#
# Security Features:
# - Automated daily scanning of Python dependencies for CVE vulnerabilities
# - Weekly Docker base image monitoring for security patches
# - GitHub Actions workflow security updates to prevent supply chain attacks
# - Integration with GitHub Security Advisories for vulnerability detection
# - Automated labeling for security team triage and response
#
# Compliance Integration:
# - Supports enterprise security review processes through reviewer assignment
# - Enables automated security scanning per Section 8.5.1 requirements
# - Provides traceability for security updates through commit message prefixes
# - Facilitates rapid response to critical vulnerabilities through daily updates
#
# Vulnerability Management:
# - Groups security patches for rapid deployment coordination
# - Separates major updates requiring manual review and testing
# - Provides clear labeling for automated security processing
# - Enables integration with safety 3.0+ and pip-audit scanning tools
#
# CI/CD Pipeline Integration:
# - Coordinates with GitHub Actions security scanning workflows
# - Supports blue-green deployment security validation
# - Enables automated security testing through PR-based updates
# - Facilitates container vulnerability scanning integration with Trivy
#
# Team Workflow Integration:
# - Assigns security updates to appropriate teams for rapid review
# - Provides clear commit messages for security audit trails
# - Enables automated processing of low-risk security patches
# - Supports manual review processes for high-impact changes
#
# =============================================================================
# RELATED SECURITY TOOLS INTEGRATION
# =============================================================================
#
# This Dependabot configuration integrates with:
# - safety 3.0+ for Python vulnerability scanning (Section 8.5.1)
# - Trivy 0.48+ for container vulnerability assessment (Section 8.5.2)
# - bandit 1.7+ for Python security analysis (Section 8.5.1)
# - pip-audit 2.7+ for package vulnerability assessment (Section 8.5.1)
# - GitHub Security Advisories for vulnerability intelligence
# - SARIF upload for security findings centralization
#
# Security Update Workflow:
# 1. Dependabot detects security vulnerability in dependency
# 2. Automated PR created with security label and reviewer assignment
# 3. CI/CD pipeline runs security validation (safety, bandit, Trivy)
# 4. Security team reviews and approves for rapid deployment
# 5. Blue-green deployment with performance and security validation
# 6. Automated monitoring for regression detection post-deployment
#
# =============================================================================